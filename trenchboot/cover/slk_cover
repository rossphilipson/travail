x86: Trenchboot secure late launch Linux kernel support

The basic idea of the Trenchboot project is to allow a Linux kernel to be
directly "late launched" establising a Dynamic Root of Trust Measurement
(DRTM). The late launch will be initiated by boot loader with assocaited
support added to it, for example the first capable target will be GRUB2.
The process of establishing a DRTM involves measuring everything
that is intended to be run (kernel image, initrd, etc) and everything that
will configure that kernel to run (command line, boot params, etc) into
specific PCRs in the TPM. Another key aspect is the late launch is rooted
in hardware. On Intel this is done using TXT and on AMD it is done using
SKINIT. Information on these technologies can be readily found online.

To make a kernel able to be launched from TXT or SKINIT, a stub must be built
into the setup section of the compressed kernel to handle the sepcific state
that the late launch process leaves the BSP in. This is a lot like the EFI stub
that is found in the same area. Also this stub must measure everything that is
going to be used as early as possible. This stub code and subsequent code must
also deal with the specific state that the late launch leaves the APs in.

A quick note on terminology. The open source project itself is called
Trenchboot which is hosted on Github (links below). The technology is
referred to as "Secure Launch" within the kernel code. So the prefixes
sl_/SL_ or slaunch/SLAUNCH will be seen in the code. The stub code discussed
above is referred to as the SL stub.

The basic flow is:

 - Entry from the late launch jumps to the SL stub
 - SL stub fixes up the world on the BSP
 - For TXT, SL stub wakes the APs, fixes up their worlds
 - For TXT, APs are left waiting in a pause/jmp loop for an NMI to wake them
 - SL stub jumps to startup_32
 - Kernel boot proceeds normally
 - During early setup, SL code runs to finish some validation and setup tasks
 - The SMP bringup code is modified to wake the APs
 - Kernel boot finishes booting normally

This is an initial internal posting of the kernel support patches for
Trenchboot. The code is functional using TXT and will boot to user mode
following a secure late launch. A few things to note:

 - There are still bits and pieces missing, specifically in patch 6 (further
   validation, memory reservation, etc).
 - We are focusing on Intel TXT first per OCI's wishes so some of the AMD bits
   are not implemented yet though others are.
 - Patch 1 will change once we hammer out the final details of the boot
   protocol and changes to the boot params with the x86 maintainers.

We wanted to get this code out for review once it was working. Anyway, please
have a look.

Links:

The Trenchboot project including documentation:

https://github.com/trenchboot

Our internal OCI Confluence page:

https://confluence.oci.oraclecorp.com/pages/viewpage.action?spaceKey=linux&title=TrenchBoot

AMD SKINIT is documented in the System Programming manual:

https://www.amd.com/system/files/TechDocs/24593.pdf

Intel TXT is documented in its own specification and in the SDM Instruction Set volume:

https://www.intel.com/content/dam/www/public/us/en/documents/guides/intel-txt-software-development-guide.pdf
https://software.intel.com/en-us/articles/intel-sdm

Thanks
Ross

---

0001-x86-Secure-Launch-Kconfig.patch
 NOTE: This patch is still waiting to be updated with the final implementation
       of the boot params.
 v2:
   * Set bool default=n and add to the description.
   * Changed CONFIG_SECURE_LAUNCH_STUB to CONFIG_SECURE_LAUNCH.
   * Change sl_mle_header to mle_header.
 v3:
   * Remove changes to the build tool to write the mle_header offset.

0002-x86-Secure-Launch-main-header-file.patch
 v2:
   * Added offsets, struct and error codes for e820 TXT reservations.
   * Added comments from code review.
   * Use asm-offsets for OS-MLE structure (and offsetof in C code).
   * Defines for Intel and AMD manufacturer CPUID.
 v3:
   * Move slaunch.h to include/linux since it is included outside of arch/x86
   * Use #define function() do { } while (0) instead of ifdefs in code.
   * Have boot loader provide an MLE scratch area in OS/MLE heap table.
   * Change TXT heap accessors to not use __iomem type.
   * Add other TXT structures and use offsets instead of #define offsets.

0003-x86-Add-early-SHA-support-for-measuring-zero-page-a.patch
 v2:
   * Added comment about where the code originated in include/crypto/sha1_base.h.
   * Fixed a few warnings found by checkpatch.
   * Define SHA1_DISABLE_EXPORT before including sha1.c to disable EXPORTs.
 v3:
   * Add SHA256 and SHA512 support.

0004-x86-Add-early-TPM-TIS-CRB-interface-support-for-Secu.patch
 v3:
   * Break out TIS/CRB code into their own patch.
   * Include from a tpm/ subdir directly.
   * Fix formatting from checkpatch.pl

0005-x86-Add-early-TPM1.2-TPM2.0-interface-support-for-Se.patch
 v3:
   * Break out TPM1/2 code into their own patch.
   * Include from a tpm/ subdir directly.
   * Fix formatting from checkpatch.pl

0006-x86-Add-early-general-TPM-interface-support-for-Secu.patch
 v2:
   * General code fixes found in review of v1 from Daniel Smith.
   * Cleanup from running checkpatch.
 v3:
   * Break out TPM general code into its own patch.
   * Include from a tpm/ subdir directly.
   * Remove release locality loop from tis_init().
   * Fix formatting from checkpatch.pl

0007-x86-Secure-Launch-kernel-early-boot-stub.patch
 v2:
   * Removed unfinished AMD support for now.
   * Cleanup from running checkpatch.
   * Added a number of comments in code to explain things.
   * Remove cache disable code, TXT left it al UC anyway.
   * Remove incorrect stack adds after i/lrets.
   * Fix the manufacturer jump logic in sl_stub.S
   * Fix some cast issues and related in sl_main.c
   * Moved SHA1 and PCR extend code to a common function.
   * Protect the MLE area on all platforms.
   * Use defines and asm-offsets for numeric values in sl_stub.
   * Add support for runtime detection of Secure Launch entry.
   * Reorder startup operations to more closely match specification.
   * Add measuring of setup_data and EFI memory map.
 v3:
   * Removed uneeded check for execution on BSP in sl_stub.
   * Removed uneeded EOI for NMI interrupt in sl_stub.
   * Add support for extending TPM2.0 PCRs with SHA256 and SHA512 hashes.
   * Add kernel_info field to expose the offset to the mle_header.
   * Add support for writing PCR measurements to the TPM event log.
   * Use TXT heap accessors in sl_main() code.
   * Use IO readq/writeq functions to access TXT registers.
   * Added a GETSEC asm macro.
   * Fix formatting from checkpatch.pl

0008-x86-Secure-Launch-kernel-late-boot-stub.patch
 v2:
   * Removed unfinished AMD support for now.
   * Fixed error handling in the late SL stub code.
   * Added e820 reservations for TXT specific memory ranges.
   * Added VTd PMR validation for TXT.
   * Fixed the DMAR copying code to happen earlier before IOMMU driver loads.
   * Check for offset == 0 during heap walk.
   * Cleanup from running checkpatch.
   * Add support for runtime detection of Secure Launch entry.
 v3:
   * Use memremap with TXT heap and access directly with pointers.
   * Fix incorrect define used in DMAR copying code.
   * Fix formatting from checkpatch.pl

0009-x86-Secure-Launch-SMP-bringup-support.patch
 v2:
   * Removed unfinished AMD support for now.
   * Use atomic_dec_and_test to allow 1 pass through slaunch_fixup_jump_vector.
   * Added comments to TXT AP functions.
   * New implementation of the AP wake up code to allow it to be relocated.
     to a safe location away from the kernel extraction area.
   * Add support for runtime detection of Secure Launch entry.
   * Fix rmpiggy slaunch code to properly form the 32b addresses.

0010-x86-Secure-Launch-adding-event-log-securityfs.patch
 v2:
   * Removed unfinished AMD support for now.
   * Cleanup from running checkpatch.
   * Removed sl_memfile_read and use built in simple_read_from_buffer.
   * Add support for runtime detection of Secure Launch entry.
v3:
   * Allow TPM event log writing through securityfs interface.
   * Use memremap with TXT heap and access directly with pointers.

0011-kexec-Secure-Launch-kexic-SEXIT-support.patch
 v3:
   * Added SEXIT support during kexec for target kernel.

0012-tpm-Allow-locality-2-to-be-set-when-initializing-the.patch
 v3:
   * Switch TPM interface to locality 2 when doing a Secure Launch.
