---- Linux Kernel Boot ----

The Linux boot process is rather complicated and has a lot of lagacy baggage
that it carries around. This is an attempt to collect some of that process
in one place. Note this is only concerned with x86 platforms. These notes deal
with legacy booting of Linux.

First consider there are 2 ways of booting a legacy Linux kernel:

1. Starting directly from real mode and jumping to the real mode boot sector.
2. Jumping to the 32b entry point(s) names startup_32 from a boot loader.

See linux-efi-boot.txt for details on an EFI boot of the Linux kernel.

-- Layout --

The Linux kernel starts out as the bzImage. This file has several sections and
they are placed in different areas of memory. Consider the following memory
map - it gives a pretty good view of the recommended layout:

        |  Protected-mode kernel    |  The kernel protected-mode code.
100000  +---------------------------+
        |  I/O memory hole          |
0A0000  +---------------------------+
        |  Reserved for BIOS        |  Do not use.  Reserved for BIOS EBDA.
099100  +---------------------------+
        |  cmdline                  |
099000  +---------------------------+
        |  Stack/heap               |  For use by the kernel real-mode code.
098000  +---------------------------+
        |  Kernel setup             |  The kernel real-mode code.
090200  +---------------------------+
        |  Kernel boot sector       |  The kernel legacy boot sector.
090000  +---------------------------+
        |  Boot loader              |  <- Boot sector entry point 0000:7C00
001000  +---------------------------+
        |  Reserved for MBR/BIOS    |
000800  +---------------------------+
        |  Typically used by MBR    |
000600  +---------------------------+
        |  BIOS use only            |
000000  +---------------------------+

The first 64K of the bzImage is called the real mode boot sector and is copied
to 0x90000 (called Kernel boot sector here). The Boot loader is the real
mode entry point that jumps to the Kernel setup address.

The Protected-mode kernel is loaded at 0x100000 and can be entered in either
32b or 64b modes. This is the uncompressed code that wraps the main Linux kernel
compressed payload (called the piggy) and the payload itself. More on this in
the section named Protected Mode Kernel below.

-- Real Mode Boot Sector and Setup Code --

This area (also see Zero Page below) is a strange place. It consists of what is
the Real-mode Kernel Header, a pile of other parameters called the Boot Params
and 16b Setup Code. The first 512 bytes is officially called the Boot Sector.
The following shows this (look for **** THE REAL-MODE KERNEL HEADER):

https://www.kernel.org/doc/Documentation/x86/boot.txt

Everything from 0x1F1 to 0x200 (512 byte boundary) is the original header. At
512 bytes is where the boot loader jump would take you. To allow extending the
header, the 2 byte jump field at 0x200 was added. This jumps over the header
extensions which offficially start at 0x200 and go to 0x268 as can be seen.
All the area before the header contains Boot Params.

The code that forms the Setup Code is in arch/x86/boot/head.S where the Real-
mode Kernel Header is laid out. The rest of the Boot Params are defined in
arch/x86/include/uapi/asm/bootparam.h. Their current status is discussed here:

https://github.com/torvalds/linux/blob/master/Documentation/x86/zero-page.txt

The Real-mode Header is setup in the Linux kernel at build time and is intended
to convey configuration setting to the boot loader. This is done in various
ways:
 - Hard coded
 - Written at build time by the utility program arch/x86/boot/tools/build

The values for the Boot Params are setup at boot time primarily by the boot
loader to convey configuration information and settings to the kernel. The
values are populated in various ways:
 - Written by the boot loader program (for our purposes GRUB)
 - Written by code in the protected mode entry points.

The real mode Setup Code does a bunch of legacy setup and then jumps to the
Protected-mode kernel which is method #1 above. This would include BIOS calls
to get the E820.

Finally why is it called the Zero Page? The story is different when the Kernel
is entered in one of the ways other than #1. The rest of the Zero Page is used
in this case since the real mode code is useless. E.g the fixed size E820 is
populated in this area at 0x2d0. Effectively data is splatted over the real
mode code. The whole thing is officially padded out to one page - thus the
Zero Page. This data in extra area is also considered part of the Boot Params.

-- Protected Mode Kernel --

This is the bulk of the kernel. It comes in two logical parts:
1. The protected mode uncompressed entry point code at the beginning
   of the image. These start at arch/x86/boot/compressed/head_32/64.S
2. The compressed payload (piggy) that the uncompressed part
   decompresses and runs.

#1 part is basically the code in arch/x86/boot/compressed. The #2 method of
booting from the list above enters at startup_32/64 in protected mode with the
Zero Page address in %esi. Together the entire image is called the compressed
kernel.

-- Build Tool --

The build tool mentioned above that is built from arch/x86/boot/tools/build.c
is used to fixup Real-Mode Kernel Header that is built into
arch/x86/boot/setup.bin and the Protected Mode Kernel binary which is
arch/x86/boot/compressed/vmlinux.bin. Both files are read as well as
arch/x86/boot/zoffset.h. The latter file is parsed to find the entry
point offsets like startup_32/64 which are written to setup.bin as well as some
other values. The checksum is updated in vmlinux.bin and then both are mashed
together and written out as bzImage.

-- GRUB --

Just a little bit on GRUB, specifically the Linux loader and the 32b relocator.
The Linux loader is in grub/grub-core/loader/i386/linux.c. This function
grub_cmd_linux() is called when a "kernel" entry is found in grub.cfg. This
routine does all the setup and then registers the callbacks to do the boot
here:

grub_loader_set (grub_linux_boot, grub_linux_unload,
                 0 /* set noreturn=0 in order to avoid grub_console_fini() */);

When Linux is booted, grub_linux_boot() is called. It does further setup and
calls grub_relocator32_boot(). This routine is in the relocator code in
grub/grub-core/loader/i386/relocator.c and uses grub_relocator32_start
in grub/grub-core/loader/i386/relocator32.S to do the final launch.

-- Protected Mode Kernel Details --

The earlier section covered the main kernel binary at a high level. This is
a deeper dive into what really happens starting with startup_32/64. Some
specific numbers and assumptions from a specific build of the kernel will
be used just to illustrate how it all progresses.

So some assumption:
 - The kernel is started via startup_64 in boot/compressed/head_64.S.
 - The initial address of startup_32 is 0x100000 or 1M, the default.
 - KASLR is not enabled so the kernel will be loaded at its preferred
   address.
 - The boot loader did not relocate the kernel from the default location.
 - The defaults are 16M location and alignment:
    CONFIG_PHYSICAL_START=0x1000000
    CONFIG_PHYSICAL_ALIGN=0x1000000

To start, a look at the linker file is very useful to understand the layout
of the kernel binary. It is not that big so the whole thing is presented here:

OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64", "elf64-x86-64")
OUTPUT_ARCH(i386:x86-64)
ENTRY(startup_64)
SECTIONS
{
 . = 0;
 .head.text : {
  _head = . ;
  KEEP(*(.head.text))
  _ehead = . ;
 }
 .rodata..compressed : {
  *(.rodata..compressed)
 }
 .text : {
  _text = .;
  *(.text)
  *(.text.*)
  _etext = . ;
 }
 .rodata : {
  _rodata = . ;
  *(.rodata)
  *(.rodata.*)
  _erodata = . ;
 }
 .got : {
  _got = .;
  KEEP(*(.got.plt))
  KEEP(*(.got))
  _egot = .;
 }
 .data : {
  _data = . ;
  *(.data)
  *(.data.*)
  _edata = . ;
 }
 . = ALIGN((1 << (6)));
 .bss : {
  _bss = . ;
  *(.bss)
  *(.bss.*)
  *(COMMON)
  . = ALIGN(8);
  _ebss = .;
 }
 . = ALIGN((1 << 12));
 .pgtable : {
  _pgtable = . ;
  *(.pgtable)
  _epgtable = . ;
 }
 . = ALIGN((1 << 12));
 _end = .;
}

A breakdown of the important sections for this discussion. Note the order of
what is where, that is important:

 - .head.text: This is where the code in head_64.S lives
 - .rodata..compressed: This contains the compressed main kernel payload. For
    this build, that blob is about 5M.
 - .text: The main text section that contains the rest of the code under
    boot/compressed including the decompression code.
 - .bss: The BSS which is close to the end of the image with only .pgtable
    after it.

Finally there is the global symbol _end that is the absolute end of the entire
image.

Moving onward, the first interesting block of code is this:

	/* Start with the delta to where the kernel will run at. */
#ifdef CONFIG_RELOCATABLE
        leaq    startup_32(%rip) /* - $startup_32 */, %rbp
        movl    BP_kernel_alignment(%rsi), %eax
        decl    %eax
        addq    %rax, %rbp
        notq    %rax
        andq    %rax, %rbp
        cmpq    $LOAD_PHYSICAL_ADDR, %rbp
        jge     1f
#endif
        movq    $LOAD_PHYSICAL_ADDR, %rbp
1:

Here, %rbp is being loaded with address where the entire kernel will be loaded
and decompressed in place. The assumption is that the value is
LOAD_PHYSICAL_ADDR and it is 16M. The boot loader could have forced a
relocation by changing BP_kernel_alignment here. Just under this is:

        /* Target address to relocate to for decompression */
        movl    BP_init_size(%rsi), %ebx
        subl    $_end, %ebx
        addq    %rbp, %rbx

        /* Set up the stack */
        leaq    boot_stack_end(%rbx), %rsp

Now things start getting interesting. For this specific build the value of
BP_init_size is 0x17f9000 which is about 25M. This is the size needed for the
entire kernel image to be copied to and decompressed in place.

Following the math, %ebx first gets set to a value 25M minus the size of the
kernel image which is about 5.2M (note most of that is the payload, the extra
.2M is all the uncompressed code and other sections in the image). Remember
that _end is effectively the length of the kernel image. Then %rbp is added to
that offset in %rbx putting it that many bytes into the target address for the
kernel in %rbp.

The stack is in .bss but the above code loads the stack relative to %rbx. That
is because the entire kernel image is going to be relocated to %rbx. That
happens here:

/*
 * Copy the compressed kernel to the end of our buffer
 * where decompression in place becomes safe.
 */
        pushq   %rsi
        leaq    (_bss-8)(%rip), %rsi
        leaq    (_bss-8)(%rbx), %rdi
        movq    $_bss /* - $startup_32 */, %rcx
        shrq    $3, %rcx
        std
        rep     movsq
        cld
        popq    %rsi

This copies (backwards) everything in the current kernel image starting from the
.bss section back to startup_32 (the beginning at 0x100000) to the new location
at the end of the kernel target area (%rbx). It does not copy the .bss section
because it is already being used (e.g. %rsp was set to use the stack area there).

Next the code jumps off to the relocated code:

/*
 * Jump to the relocated address.
 */
        leaq    relocated(%rbx), %rax
        jmp     *%rax

And finally it does the in place decompression and the final jump to the main
kernel (which is at 0x1000000).

A picture of the layout, not to scale:

                Kernel decompressed here...                 .head.text piggy  .text   ...   .bss  .pgtable
     |-----------------------------------------------------|----------|------|------|------|-----|---------|
 0x1000000                                            startup_32                   |                     _end
target area (%rbp)                                relocated image (%rbx)           |
     ^                                                                             |
     |                                                                             |
     +-----------------------------------------------------------------------------+
       Decompression and final jmp from the uncompressed code to the real kernel

-- Details on kexec --

All the boot params handling can be seen in here: arch/x86/kernel/kexec-bzimage64.c

TODO more on this, maybe move to its own file.
