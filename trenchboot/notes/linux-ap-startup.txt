---- Linux AP Startup ----

On Intel and AMD systems with standard integrated APICs, APs are started using
the INIT-SIPI-SIPI sequence. In the Linux 4.18 kernel, the code to do the AP
startup is in arch/x86/kernel/smpboot.c. The sequence of calls is as follows:

do_boot_cpu()
  wakeup_cpu_via_init_nmi()
    wakeup_secondary_cpu_via_init()

The startup sequence is done by sending INIT and SIPI IPIs to the specific AP's
LAPIC through the BSP's LAPIC. There is a quick summary at this link
(see AP startup, Sending IPIs):

https://wiki.osdev.org/Symmetric_Multiprocessing#AP_startup

And the SIPI step can be seen in the kernel code here:

                apic_icr_write(APIC_DM_STARTUP | (start_eip >> 12),
                               phys_apicid);

More detailed information can be found in the Intel and AMD manuals. The main
thing to note is that the SIPI startup vector is a page frame number for a
page below 1M and the AP will start in real mode. This means the kernel must
provide a 16b trampoline in low memory to be able to do the AP startup. Enter
the real mode piggy or rmpiggy as it is called.

-- Real Mode Piggy --

The code that is compiled into the rmpiggy image is under arch/x86/realmode/rm.
The following is the anatomy of the rmpiggy assuming the kernel is built as
x86_64.

The main trampoline code is in trampoline_64.S. Execution starts at the symbol
trampoline_start in 16b real mode. The real mode code does the minimum to setup
for a jump to protected mode at startup_32. The protected mode code does the
minimum to setup for a jump to long mode eventually getting to 64 bit mode at
startup_64. Finally this code jumps back to the main kernel through the value
in tr_start in the trampoline header.

The trampoline header is located at the end of trampoline_64.S and contains
values setup by the support code (see below). There are several values there
used in the trampoline code including the final jump out of the trampoline via
tr_start which is set to secondary_startup_64 in the main kernel.

The rmpiggy also contains the real mode header in header.S. This header
contains offsets to locations in the rmpiggy image and is fixed up by the
support code before the rmpiggy is relocated to its home in low memory. The
file arch/x86/include/asm/realmode.h contains a C definition of this header
structure and is used to point to the real mode header after relocation. The
primary fields of interest for this discussion are:

  trampoline_start: The 16b entry point passed as the startup vector for SIPI
  trampoline_header: The location of the this header that the support code sets up

The final output is the rmpiggy image in realmode.bin (which is objcopy'd from
realmode.elf) and realmode.relocs.

-- Real Mode Piggy Support Code --

The code that packages the rmpiggy at build time and handles the rmpiggy at
runtime is under arch/x86/realmode.

The file rmpiggy.S pulls the rmpiggy image and relocs file into the .init.data
section of the kernel image at build time. The code in init.c, which is built
into the kernel itself, loads the rmpiggy located at the symbol real_mode_blob.
This blob/image is copied to a location in low memory < 1M. It then fixes up
the segments and addresses in the relocated rmpiggy image to match the
location where it now resides (see Relocs File below). The final stage is to
update the trampoline header in the relocated rmpiggy. All of this happens at
early kernel init time.

The smpboot.c code later finds the trampoline entry point by fetching the
trampoline_start from the real mode header in the relocated rmpiggy.

-- Relocs File --

The relocs files are binary file created by the reloc tool that is built under
arch/x86/tools and used at Linux build time. In particular it creates the file
realmode.relocs off of the realmode.elf binary. As an example, this will create
that file:

$ ./relocs --realmode ../realmode/rm/realmode.elf > realmode.relocs

This is an example from a build of 4.18. The format is a series of 32b
integers. The first is the number of 16b segment relocations followed by the
series of those values. After that series there is the number of 32b linear
relocations followed by the series of those values.

00000000  04 00 00 00 06 10 00 00  ae 11 00 00 d5 11 00 00  |................| <-- 4 16b segment relocs (offset 0)
00000010  00 12 00 00 1e 00 00 00  00 00 00 00 04 00 00 00  |................| <-- 1e 32b linear relocs (offset 0x14)
00000020  08 00 00 00 0c 00 00 00  10 00 00 00 14 00 00 00  |................|
00000030  18 00 00 00 1c 00 00 00  20 00 00 00 28 00 00 00  |........ ...(...|
00000040  32 00 00 00 72 00 00 00  7a 00 00 00 92 00 00 00  |2...r...z.......|
00000050  9a 00 00 00 a2 00 00 00  41 10 00 00 33 1e 00 00  |........A...3...|
00000060  4a 1e 00 00 54 1e 00 00  63 1e 00 00 7a 1e 00 00  |J...T...c...z...|
00000070  82 1e 00 00 8a 1e 00 00  90 1e 00 00 a4 1e 00 00  |................|
00000080  ba 1e 00 00 ca 1e 00 00  e0 1e 00 00 e7 1e 00 00  |................|
00000090

The code in arch/x86/readmode/init.c (mentioned above) fixes up the rmpiggy
at runtime after relocating the image to its final location < 1M. The new
relocation base address is used to adjust each relocation.

An example of a 16b segment update, take the first reloc at 0x04. It updates
this code:

    1003:       ea 08 10 00 00 8c c8    ljmp   $0xc88c,$0x1008

It fixes up the ljmp code segment argument by setting it to the new segment
value which is the new base >> 4. Note this is 16b code so all offsets can be
manipulated/fixed up by changing with the code seqment value. To see this
consider the lines shortly after the jump:

        lidtl   tr_idt  # load idt with 0, 0
        lgdtl   tr_gdt  # load gdt with whatever is appropriate

Since the jump loaded %cs with the new segment and all the other segment
registers got this value, the offsets to tr_idt and tr_gdt are just the
image offsets w/o fixups.

An example of a 32b linear update, take the reloc at 0x7c. It updates this
code:

    1ea3:       ea 00 1f 00 00 10 00    ljmp   $0x10,$0x1f00

It fixes up the ljmp linear address argument by adding the new base to
0x1ea4 (skipping the ljmp op 0xea). Note this is 32 bit code so the code
segment selector does not change.

The reloc tool for real mode also recognizes all symbols starting with pa_
and fixes those up as well by adding the new base value to them. These are
generally global data and the pa_ symbol is associated with its non-pa_
counterpart in the linker script realmode.lds for example:

        ljmpl   $__KERNEL_CS, $pa_startup_64

The symbol pa_startup_64 was fixed up to locate startup_64 for the jump
to 64 bit mode.

A final note, the relocs from 0x18 to 0x38 are updating the data values in
the realmode header discused previously in these notes, all of which have
pa_ symbol counterparts.

-- Aside --

The disassembler can sometimes get things wrong. Take this 16b code sequence
from the entry point to the rmpiggy:

        LJMPW_RM(1f)
1:
        mov     %cs, %ax        # Code and data in the same place
        mov     %ax, %ds
        mov     %ax, %es
        mov     %ax, %ss

The disasm comes up with this where one of the movs is missing:

    1003:       ea 08 10 00 00 8c c8    ljmp   $0xc88c,$0x1008
    100a:       8e d8                   mov    %eax,%ds
    100c:       8e c0                   mov    %eax,%es
    100e:       8e d0                   mov    %eax,%ss

Actually the ljmp instruction is really "ea 08 10 00 00" where the offset and
segment are both 16b values. The "8c c8" is the missing instruction:

       mov     %cs, %ax
