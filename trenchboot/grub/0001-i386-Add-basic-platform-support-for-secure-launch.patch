From 996292b9f6e2124799061a3c3b06af728624cc81 Mon Sep 17 00:00:00 2001
From: Ross Philipson <ross.philipson@oracle.com>
Date: Wed, 7 Aug 2019 13:50:14 -0400
Subject: [PATCH 1/7] i386: Add basic platform support for secure launch

Signed-off-by: Ross Philipson <ross.philipson@oracle.com>
---
 include/grub/i386/cpuid.h |  13 ++++++
 include/grub/i386/mmio.h  | 105 ++++++++++++++++++++++++++++++++++++++++++++++
 include/grub/i386/msr.h   |  86 +++++++++++++++++++++++++++++++++++++
 3 files changed, 204 insertions(+)
 create mode 100644 include/grub/i386/mmio.h
 create mode 100644 include/grub/i386/msr.h

diff --git a/include/grub/i386/cpuid.h b/include/grub/i386/cpuid.h
index f7ae4b0a4..8176e5d11 100644
--- a/include/grub/i386/cpuid.h
+++ b/include/grub/i386/cpuid.h
@@ -19,6 +19,19 @@
 #ifndef GRUB_CPU_CPUID_HEADER
 #define GRUB_CPU_CPUID_HEADER 1
 
+/* General  */
+#define GRUB_X86_CPUID_VENDOR	0x00000000
+#define GRUB_X86_CPUID_FEATURES	0x00000001
+
+/* Intel  */
+#define GRUB_VMX_CPUID_FEATURE	(1<<5)
+#define GRUB_SMX_CPUID_FEATURE	(1<<6)
+
+/* AMD  */
+#define GRUB_AMD_CPUID_FEATURES	0x80000001
+#define GRUB_SVM_CPUID_FEATURE	(1<<2)
+#define GRUB_AMD_CPUID_FUNC	0x8000000a
+
 extern unsigned char grub_cpuid_has_longmode;
 extern unsigned char grub_cpuid_has_pae;
 
diff --git a/include/grub/i386/mmio.h b/include/grub/i386/mmio.h
new file mode 100644
index 000000000..6a4c4946a
--- /dev/null
+++ b/include/grub/i386/mmio.h
@@ -0,0 +1,105 @@
+/*
+ *  GRUB  --  GRand Unified Bootloader
+ *  Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ *
+ *  GRUB is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *
+ *  GRUB is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with GRUB.  If not, see <https://www.gnu.org/licenses/>.
+ */
+
+#ifndef GRUB_MMIO_H
+#define GRUB_MMIO_H 1
+
+#include <grub/types.h>
+
+#define grub_mb()	__asm__ __volatile__ ("mfence" : : : "memory")
+#define grub_rmb()	__asm__ __volatile__ ("lfence" : : : "memory")
+#define grub_wmb()	__asm__ __volatile__ ("sfence" : : : "memory")
+#define grub_barrier()	__asm__ __volatile__ ("" : : : "memory")
+
+static __inline grub_uint8_t
+grub_readb (void *addr)
+{
+  grub_uint8_t _v;
+
+  grub_barrier();
+  _v = (*(volatile grub_uint8_t*)(addr));
+  grub_rmb();
+  return _v;
+}
+
+static __inline grub_uint16_t
+grub_readw (void *addr)
+{
+  grub_uint16_t _v;
+
+  grub_barrier();
+  _v = (*(volatile grub_uint16_t*)(addr));
+  grub_rmb();
+  return _v;
+}
+
+static __inline grub_uint32_t
+grub_readl (void *addr)
+{
+  grub_uint32_t _v;
+
+  grub_barrier();
+  _v = (*(volatile grub_uint32_t*)(addr));
+  grub_rmb();
+  return _v;
+}
+
+static __inline grub_uint64_t
+grub_readq (void *addr)
+{
+  grub_uint64_t _v;
+
+  grub_barrier();
+  _v = (*(volatile grub_uint64_t*)(addr));
+  grub_rmb();
+  return _v;
+}
+
+static __inline void
+grub_writeb (grub_uint8_t value, void *addr)
+{
+  grub_wmb();
+  (*(volatile grub_uint8_t *)(addr)) = value;
+  grub_barrier();
+}
+
+static __inline void
+grub_writew (grub_uint16_t value, void *addr)
+{
+  grub_wmb();
+  (*(volatile grub_uint16_t *)(addr)) = value;
+  grub_barrier();
+}
+
+static __inline void
+grub_writel (grub_uint32_t value, void *addr)
+{
+  grub_wmb();
+  (*(volatile grub_uint32_t *)(addr)) = value;
+  grub_barrier();
+}
+
+static __inline void
+grub_writeq (grub_uint64_t value, void *addr)
+{
+  grub_wmb();
+  (*(volatile grub_uint64_t *)(addr)) = value;
+  grub_barrier();
+}
+
+#endif
diff --git a/include/grub/i386/msr.h b/include/grub/i386/msr.h
new file mode 100644
index 000000000..858948ef7
--- /dev/null
+++ b/include/grub/i386/msr.h
@@ -0,0 +1,86 @@
+/*
+ *  GRUB  --  GRand Unified Bootloader
+ *  Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ *
+ *  The definitions in this header are extracted from the Trusted Computing
+ *  Group's "TPM Main Specification", Parts 1-3.
+ *
+ *  GRUB is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *
+ *  GRUB is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with GRUB.  If not, see <https://www.gnu.org/licenses/>.
+ */
+
+#ifndef GRUB_X86_MSR_H
+#define GRUB_X86_MSR_H 1
+
+/* General */
+
+#define GRUB_MSR_X86_PLATFORM_ID	0x00000017
+
+#define GRUB_MSR_X86_APICBASE		0x0000001b
+#define GRUB_MSR_X86_APICBASE_BSP	(1<<8)
+#define GRUB_MSR_X86_APICBASE_ENABLE	(1<<11)
+#define GRUB_MSR_X86_APICBASE_BASE	(0xfffff<<12)
+
+#define GRUB_MSR_X86_FEATURE_CONTROL	0x0000003a
+#define GRUB_MSR_X86_ENABLE_VMX_IN_SMX	(1<<1)
+#define GRUB_MSR_X86_SENTER_FUNCTIONS	(0x7f<<8)
+#define GRUB_MSR_X86_SENTER_ENABLE	(1<<15)
+
+#define GRUB_MSR_X86_MCG_CAP		0x00000179
+#define GRUB_MSR_MCG_BANKCNT_MASK	0xff      /* Number of banks  */
+#define GRUB_MSR_X86_MCG_STATUS		0x0000017a
+#define GRUB_MSR_MCG_STATUS_MCIP	(1ULL<<2) /* MC in progress  */
+
+#define GRUB_MSR_X86_MC0_STATUS		0x00000401
+
+#define GRUB_MSR_X86_EFER		0xc0000080 /* Extended features  */
+#define GRUB_MSR_EFER_SVME		(1<<12)    /* Enable virtualization  */
+
+/* AMD Specific */
+
+#define GRUB_MSR_AMD64_PATCH_LEVEL	0x0000008b
+#define GRUB_MSR_AMD64_PATCH_CLEAR	0xc0010021 /* AMD-specific microcode
+						      patch clear  */
+#define GRUB_MSR_AMD64_VM_CR		0xc0010114
+#define GRUB_MSR_SVM_VM_CR_SVM_DISABLE	4
+
+static inline grub_uint64_t
+grub_rdmsr(grub_uint32_t msr)
+{
+  grub_uint64_t val = 0;
+
+#ifdef __x86_64__
+  asm volatile("rdmsr" : "=A" (val) : "c" (msr));
+#else
+  grub_uint32_t low, high;
+  asm volatile("rdmsr"  : "=a" (low), "=d" (high) : "c" (msr));
+  val = ((low) | (grub_uint64_t)(high) << 32);
+#endif
+
+  return val;
+}
+
+static inline void
+grub_wrmsr(grub_uint32_t msr, grub_uint64_t val)
+{
+#ifdef __x86_64__
+  asm volatile("wrmsr" : "=A" (val) : "c" (msr));
+#else
+  grub_uint32_t low, high;
+  high = (grub_uint32_t) ((val & 0xFFFFFFFF00000000LL) >> 32);
+  low = (grub_uint32_t) (val & 0xFFFFFFFFLL);
+  asm volatile("wrmsr"  : "=a" (low), "=d" (high) : "c" (msr));
+#endif
+}
+
+#endif
-- 
2.13.6

