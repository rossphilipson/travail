From 354b0c1ebaf8e6cab0a9d7affc7580b1bbc4af34 Mon Sep 17 00:00:00 2001
From: Ross Philipson <ross.philipson@oracle.com>
Date: Wed, 7 Aug 2019 15:07:15 -0400
Subject: [PATCH 7/7] slaunch: Add secure launch framework and commands

Signed-off-by: Ross Philipson <ross.philipson@oracle.com>
---
 grub-core/Makefile.core.def         |   2 +
 grub-core/loader/i386/linux.c       |  22 ++-
 grub-core/loader/i386/slaunch.c     | 296 ++++++++++++++++++++++++++++++++++++
 grub-core/loader/i386/slaunch_txt.c | 118 ++++++++++++++
 include/grub/file.h                 |   3 +
 include/grub/i386/linux.h           |   4 +-
 6 files changed, 443 insertions(+), 2 deletions(-)
 create mode 100644 grub-core/loader/i386/slaunch.c
 create mode 100644 grub-core/loader/i386/slaunch_txt.c

diff --git a/grub-core/Makefile.core.def b/grub-core/Makefile.core.def
index 6a2bd7225..1e4b1c11c 100644
--- a/grub-core/Makefile.core.def
+++ b/grub-core/Makefile.core.def
@@ -1811,6 +1811,8 @@ module = {
   x86 = loader/i386/txt/txt.c;
   x86 = loader/i386/txt/acmod.c;
   x86 = loader/i386/txt/verify.c;
+  x86 = loader/i386/slaunch.c;
+  x86 = loader/i386/slaunch_txt.c;
   enable = x86;
 };
 
diff --git a/grub-core/loader/i386/linux.c b/grub-core/loader/i386/linux.c
index d0501e229..cec8babcb 100644
--- a/grub-core/loader/i386/linux.c
+++ b/grub-core/loader/i386/linux.c
@@ -34,6 +34,7 @@
 #include <grub/i386/relocator.h>
 #include <grub/i18n.h>
 #include <grub/lib/cmdline.h>
+#include <grub/i386/slaunch.h>
 #include <grub/linux.h>
 #include <grub/machine/kernel.h>
 
@@ -67,6 +68,7 @@ static grub_size_t linux_mem_size;
 static int loaded;
 static void *prot_mode_mem;
 static grub_addr_t prot_mode_target;
+static grub_size_t prot_file_size;
 static void *initrd_mem;
 static grub_addr_t initrd_mem_target;
 static grub_size_t prot_init_space;
@@ -80,6 +82,8 @@ static grub_efi_uintn_t efi_mmap_size;
 #else
 static const grub_size_t efi_mmap_size = 0;
 #endif
+static grub_err_t (*grub_slaunch_func) (struct grub_slaunch_params*) = NULL;
+static struct grub_slaunch_params slparams;
 
 /* FIXME */
 #if 0
@@ -96,6 +100,12 @@ static struct idt_descriptor idt_desc =
   };
 #endif
 
+void
+grub_linux_slaunch_set (grub_err_t (*sfunc) (struct grub_slaunch_params*))
+{
+  grub_slaunch_func = sfunc;
+}
+
 static inline grub_size_t
 page_align (grub_size_t size)
 {
@@ -616,6 +626,16 @@ grub_linux_boot (void)
   }
 #endif
 
+  /* If a secondary loader was set for secure launch, call it here.  */
+  if (grub_slaunch_func)
+    {
+      slparams.params = ctx.params;
+      slparams.real_mode_target = ctx.real_mode_target;
+      slparams.prot_mode_target = prot_mode_target;
+      slparams.prot_file_size = prot_file_size;
+      return grub_slaunch_func (&slparams);
+    }
+
   /* FIXME.  */
   /*  asm volatile ("lidt %0" : : "m" (idt_desc)); */
   state.ebp = state.edi = state.ebx = 0;
@@ -642,7 +662,7 @@ grub_cmd_linux (grub_command_t cmd __attribute__ ((unused)),
   grub_file_t file = 0;
   struct linux_i386_kernel_header lh;
   grub_uint8_t setup_sects;
-  grub_size_t real_size, prot_size, prot_file_size;
+  grub_size_t real_size, prot_size;
   grub_ssize_t len;
   int i;
   grub_size_t align, min_align;
diff --git a/grub-core/loader/i386/slaunch.c b/grub-core/loader/i386/slaunch.c
new file mode 100644
index 000000000..a9a932d72
--- /dev/null
+++ b/grub-core/loader/i386/slaunch.c
@@ -0,0 +1,296 @@
+/*
+ *  GRUB  --  GRand Unified Bootloader
+ *  Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ *
+ *  GRUB is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *
+ *  GRUB is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with GRUB.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <grub/loader.h>
+#include <grub/memory.h>
+#include <grub/normal.h>
+#include <grub/err.h>
+#include <grub/misc.h>
+#include <grub/types.h>
+#include <grub/dl.h>
+#include <grub/cpu/relocator.h>
+#include <grub/i386/cpuid.h>
+#include <grub/i386/msr.h>
+#include <grub/i386/mmio.h>
+#include <grub/i386/slaunch.h>
+
+GRUB_MOD_LICENSE("GPLv3+");
+
+/* Minimal TPM support to close any open localities before launch */
+#define TPM_MMIO_BASE	0xFED40000
+
+#define ACCESS_RELINQUISH_LOCALITY	0x20
+#define TPM_LOC_CTRL			0x0008
+
+#define TPM_INTERFACE_ID_0	0x30
+#define TPM_TIS_INTF_ACTIVE	0x00
+#define TPM_CRB_INTF_ACTIVE	0x01
+
+union grub_tpm_interface_id
+{
+  grub_uint32_t val;
+  struct
+  {
+    grub_uint32_t interface_type:4;
+    grub_uint32_t unused:28;
+  };
+} GRUB_PACKED;
+
+#define TPM_INTF_CAPABILITY_0	0x14
+#define TPM12_TIS_INTF_12	0x00
+#define TPM12_TIS_INTF_13	0x02
+#define TPM20_TIS_INTF_13	0x03
+
+union grub_tpm_intf_capability
+{
+  grub_uint32_t val;
+  struct
+  {
+    grub_uint32_t unused1:28;
+    grub_uint32_t interface_version:3;
+    grub_uint32_t unused2:1;
+  };
+} GRUB_PACKED;
+
+union grub_tpm_loc_ctrl
+{
+  grub_uint32_t val;
+  struct
+  {
+    grub_uint32_t request_access:1;
+    grub_uint32_t relinquish:1;
+    grub_uint32_t seize:1;
+    grub_uint32_t reset_establishment_bit:1;
+    grub_uint32_t _reserved:28;
+  };
+};
+
+static grub_err_t
+grub_tpm_close_locality (void)
+{
+  union grub_tpm_intf_capability intf_cap;
+  union grub_tpm_interface_id intf_id;
+  union grub_tpm_loc_ctrl loc_ctrl;
+  int is_tis = 1;
+  void *addr;
+
+  addr = (void *)(unsigned long)(TPM_MMIO_BASE + TPM_INTF_CAPABILITY_0);
+  intf_cap.val = grub_readl(addr);
+
+  if ( (intf_cap.interface_version == TPM12_TIS_INTF_12) ||
+       (intf_cap.interface_version == TPM12_TIS_INTF_13))
+    {
+      /* This is a TPM 1.2 using TIS */
+      is_tis = 1;
+      goto done;
+    }
+
+  /* This is TPM 2.0 assuming TIS for now */
+  addr = (void *)(unsigned long)(TPM_MMIO_BASE + TPM_INTERFACE_ID_0);
+  intf_id.val = grub_readl(addr);
+  if (intf_id.interface_type == TPM_CRB_INTF_ACTIVE)
+    is_tis = 0; /* TPM 2.0 using CRB */
+
+done:
+
+  if (is_tis)
+    {
+      addr = (void *)(unsigned long)(TPM_MMIO_BASE);
+      grub_writel(ACCESS_RELINQUISH_LOCALITY, addr);
+    }
+  else
+    {
+      addr = (void *)(unsigned long)(TPM_MMIO_BASE + TPM_LOC_CTRL);
+      loc_ctrl.relinquish = 1;
+      grub_writel(loc_ctrl.val , addr);
+    }
+
+  return GRUB_ERR_NONE;
+}
+
+static grub_dl_t my_mod;
+static struct grub_slaunch_module *modules = NULL, *modules_last = NULL;
+static struct grub_relocator *relocator = NULL;
+
+struct grub_slaunch_module*
+grub_slaunch_get_modules (void)
+{
+  return modules;
+}
+
+static grub_err_t
+grub_slaunch_add_module (void *addr, grub_addr_t target, grub_size_t size)
+{
+  struct grub_slaunch_module *newmod;
+
+  newmod = grub_malloc (sizeof (*newmod));
+  if (!newmod)
+    return grub_errno;
+  newmod->addr = (grub_uint8_t*)addr;
+  newmod->target = target;
+  newmod->size = size;
+  newmod->next = 0;
+
+  if (modules_last)
+    modules_last->next = newmod;
+  else
+    modules = newmod;
+  modules_last = newmod;
+
+  return GRUB_ERR_NONE;
+}
+
+static void
+grub_slaunch_free (void)
+{
+  struct grub_slaunch_module *cur, *next;
+
+  for (cur = modules; cur; cur = next)
+    {
+      next = cur->next;
+      grub_free (cur);
+    }
+  modules = NULL;
+  modules_last = NULL;
+
+  grub_relocator_unload (relocator);
+  relocator = NULL;
+}
+
+static grub_err_t
+grub_cmd_slaunch (grub_command_t cmd __attribute__ ((unused)),
+                int argc, char *argv[])
+{
+  grub_uint32_t manufacturer[3];
+  grub_uint32_t eax;
+  grub_uint64_t msr_value;
+  grub_err_t err;
+
+  if (argc == 0)
+    return grub_error (GRUB_ERR_BAD_ARGUMENT, N_("argument expected"));
+
+  /* Should be executing on the BSP  */
+  msr_value = grub_rdmsr (GRUB_MSR_X86_APICBASE);
+  if (! (msr_value & GRUB_MSR_X86_APICBASE_BSP))
+    return grub_error (GRUB_ERR_BAD_DEVICE, N_("secure launch must run on BSP"));
+
+  if (! grub_cpu_is_cpuid_supported ())
+    return grub_error (GRUB_ERR_UNKNOWN_DEVICE, N_("CPUID not supported"));
+
+  grub_cpuid (0, eax, manufacturer[0], manufacturer[2], manufacturer[1]);
+
+  if (grub_memcmp (argv[0], "txt", 3) == 0)
+    {
+      if (grub_memcmp (manufacturer, "GenuineIntel", 12) != 0)
+        return grub_error (GRUB_ERR_UNKNOWN_DEVICE, N_("Intel platform required for TXT"));
+
+      err = grub_slaunch_init_txt ();
+      if (!err)
+        err = grub_tpm_close_locality();
+
+      return err;
+    }
+  else
+    return grub_error (GRUB_ERR_BAD_ARGUMENT, N_("invalid argument"));
+
+  return GRUB_ERR_NONE;
+}
+
+static grub_err_t
+grub_cmd_slaunch_module (grub_command_t cmd __attribute__ ((unused)),
+                int argc, char *argv[])
+{
+  grub_file_t file;
+  grub_ssize_t size;
+  grub_err_t err;
+  grub_relocator_chunk_t ch;
+  void *addr = NULL;
+  grub_addr_t target;
+
+  if (argc == 0)
+    return grub_error (GRUB_ERR_BAD_ARGUMENT, N_("filename expected"));
+
+  if (! relocator)
+    {
+      relocator = grub_relocator_new ();
+      if (! relocator)
+        return grub_errno;
+    }
+
+  file = grub_file_open (argv[0], GRUB_FILE_TYPE_SLAUNCH_MODULE);
+  if (! file)
+    return grub_errno;
+
+  size = grub_file_size (file);
+  if (size == 0)
+    return grub_error (GRUB_ERR_BAD_ARGUMENT, N_("file size is zero"));
+
+  err = grub_relocator_alloc_chunk_align (relocator, &ch,
+					  0x4000000, (0xffffffff - size) + 1,
+					  size, 0x1000,
+					  GRUB_RELOCATOR_PREFERENCE_NONE, 1);
+  if (err)
+    {
+       grub_file_close (file);
+       return err;
+    }
+
+  addr = get_virtual_current_address (ch);
+  target = get_physical_target_address (ch);
+
+  err = grub_slaunch_add_module (addr, target, size);
+  if (err)
+    {
+      grub_file_close (file);
+      return err;
+    }
+
+
+  if (grub_file_read (file, addr, size) != size)
+    {
+      grub_file_close (file);
+      if (!grub_errno)
+	grub_error (GRUB_ERR_FILE_READ_ERROR, N_("premature end of file %s"),
+		    argv[0]);
+      return grub_errno;
+    }
+
+  grub_file_close (file);
+
+  return GRUB_ERR_NONE;
+}
+
+static grub_command_t cmd_slaunch, cmd_slaunch_module;
+
+GRUB_MOD_INIT(slaunch)
+{
+  cmd_slaunch =
+	grub_register_command ("slaunch", grub_cmd_slaunch,
+				0, N_("Launch Secure Loader"));
+  cmd_slaunch_module =
+	grub_register_command ("slaunch_module", grub_cmd_slaunch_module,
+				0, N_("Secure Loader module command"));
+  my_mod = mod;
+}
+
+GRUB_MOD_FINI(slaunch)
+{
+  grub_slaunch_free ();
+  grub_unregister_command (cmd_slaunch_module);
+  grub_unregister_command (cmd_slaunch);
+}
diff --git a/grub-core/loader/i386/slaunch_txt.c b/grub-core/loader/i386/slaunch_txt.c
new file mode 100644
index 000000000..0e5dfa7e4
--- /dev/null
+++ b/grub-core/loader/i386/slaunch_txt.c
@@ -0,0 +1,118 @@
+/*
+ *  GRUB  --  GRand Unified Bootloader
+ *  Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ *
+ *  GRUB is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *
+ *  GRUB is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with GRUB.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <grub/loader.h>
+#include <grub/memory.h>
+#include <grub/normal.h>
+#include <grub/err.h>
+#include <grub/misc.h>
+#include <grub/types.h>
+#include <grub/dl.h>
+#include <grub/i386/cpuid.h>
+#include <grub/i386/msr.h>
+#include <grub/i386/txt.h>
+#include <grub/i386/slaunch.h>
+
+static void*
+find_sinit_module (grub_uint32_t *size_out)
+{
+  struct grub_slaunch_module *modules;
+  void *base = NULL;
+
+  *size_out = 0;
+
+  modules = grub_slaunch_get_modules ();
+  if ( !modules )
+    return NULL; /* no external SINIT found */
+
+  do {
+    if ( grub_txt_is_sinit_acmod (modules->addr, modules->size) )
+      {
+        base = modules->addr;
+	if ( grub_txt_acmod_match_platform ((struct grub_txt_acm_header*)base) )
+          {
+            *size_out = modules->size;
+            break;
+          }
+      }
+    modules = modules->next;
+  } while ( modules );
+
+  return base;
+}
+
+grub_err_t
+grub_slaunch_boot_txt (struct grub_slaunch_params *slparams)
+{
+  grub_err_t err;
+  void *sinit_base;
+  grub_uint32_t sinit_size;
+
+  err = grub_txt_enable_smx_mode ();
+  if ( err )
+    return err;
+
+  sinit_base = find_sinit_module (&sinit_size);
+  sinit_base = grub_txt_load_sinit ((struct grub_txt_acm_header *)sinit_base);
+  if ( !sinit_base )
+    return grub_error (GRUB_ERR_BAD_MODULE,
+                       N_("No valid SINIT ACM provided for launch"));
+
+  /* TODO verify SINIT w/ verify_acmod */
+
+  err = grub_txt_verify_platform ();
+  if ( err )
+    return err;
+
+  err = grub_txt_prepare_cpu ();
+  if ( err )
+    return err;
+
+  err = grub_txt_launch_environment (slparams->prot_mode_target,
+                                     slparams->prot_file_size,
+                                     slparams->params);
+  if ( err )
+    return err;
+
+  return GRUB_ERR_NONE;
+}
+
+grub_err_t grub_slaunch_init_txt (void)
+{
+  grub_uint32_t eax, edx, ebx, ecx;
+  grub_uint64_t msr_value;
+
+  grub_cpuid(GRUB_X86_CPUID_FEATURES, eax, ebx, ecx, edx);
+  if (! (ecx & GRUB_VMX_CPUID_FEATURE) || ! (ecx & GRUB_SMX_CPUID_FEATURE) )
+    return grub_error (GRUB_ERR_BAD_DEVICE,
+                       N_("CPU does not support Intel TXT"));
+
+  msr_value = grub_rdmsr (GRUB_MSR_X86_FEATURE_CONTROL);
+  if (! (msr_value & GRUB_MSR_X86_ENABLE_VMX_IN_SMX) )
+    return grub_error (GRUB_ERR_BAD_DEVICE,
+                       N_("Intel TXT is not enabled"));
+
+  if ( (msr_value & (GRUB_MSR_X86_SENTER_FUNCTIONS | GRUB_MSR_X86_SENTER_ENABLE))
+        != (GRUB_MSR_X86_SENTER_FUNCTIONS | GRUB_MSR_X86_SENTER_ENABLE) )
+    return grub_error (GRUB_ERR_BAD_DEVICE,
+                       N_("Intel SENTER is not enabled"));
+
+  grub_linux_slaunch_set (grub_slaunch_boot_txt);
+
+  return GRUB_ERR_NONE;
+}
diff --git a/include/grub/file.h b/include/grub/file.h
index 31567483c..f08fcda74 100644
--- a/include/grub/file.h
+++ b/include/grub/file.h
@@ -128,6 +128,9 @@ enum grub_file_type
 
     GRUB_FILE_TYPE_VERIFY_SIGNATURE,
 
+    /* Secure Launch module.  */
+    GRUB_FILE_TYPE_SLAUNCH_MODULE,
+
     GRUB_FILE_TYPE_MASK = 0xffff,
 
     /* --skip-sig is specified.  */
diff --git a/include/grub/i386/linux.h b/include/grub/i386/linux.h
index ce30e7fb0..738bf73f0 100644
--- a/include/grub/i386/linux.h
+++ b/include/grub/i386/linux.h
@@ -146,6 +146,7 @@ struct linux_i386_kernel_header
   grub_uint64_t pref_address;
   grub_uint32_t init_size;
   grub_uint32_t handover_offset;
+  grub_uint32_t slaunch_header;
 } GRUB_PACKED;
 
 /* Boot parameters for Linux based on 2.6.12. This is used by the setup
@@ -319,9 +320,10 @@ struct linux_kernel_params
   grub_uint64_t pref_address;
   grub_uint32_t init_size;
   grub_uint32_t handover_offset;
+  grub_uint32_t slaunch_header;
   /* Linux setup header copy - END. */
 
-  grub_uint8_t _pad7[40];
+  grub_uint8_t _pad7[36];
   grub_uint32_t edd_mbr_sig_buffer[EDD_MBR_SIG_MAX];	/* 290 */
   struct grub_e820_mmap e820_map[(0x400 - 0x2d0) / 20];	/* 2d0 */
 } GRUB_PACKED;
-- 
2.13.6

