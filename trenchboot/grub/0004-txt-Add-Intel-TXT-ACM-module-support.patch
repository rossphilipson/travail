From 29625fca3b170be958b63cf35fe2fa67790ec395 Mon Sep 17 00:00:00 2001
From: Ross Philipson <ross.philipson@oracle.com>
Date: Wed, 7 Aug 2019 13:59:18 -0400
Subject: [PATCH 4/7] txt: Add Intel TXT ACM module support

Signed-off-by: Ross Philipson <ross.philipson@oracle.com>
---
 grub-core/Makefile.core.def       |   1 +
 grub-core/loader/i386/txt/acmod.c | 459 ++++++++++++++++++++++++++++++++++++++
 2 files changed, 460 insertions(+)
 create mode 100644 grub-core/loader/i386/txt/acmod.c

diff --git a/grub-core/Makefile.core.def b/grub-core/Makefile.core.def
index c2b84d7e0..0c174b60e 100644
--- a/grub-core/Makefile.core.def
+++ b/grub-core/Makefile.core.def
@@ -1809,6 +1809,7 @@ module = {
 module = {
   name = slaunch;
   x86 = loader/i386/txt/txt.c;
+  x86 = loader/i386/txt/acmod.c;
   enable = x86;
 };
 
diff --git a/grub-core/loader/i386/txt/acmod.c b/grub-core/loader/i386/txt/acmod.c
new file mode 100644
index 000000000..b80316038
--- /dev/null
+++ b/grub-core/loader/i386/txt/acmod.c
@@ -0,0 +1,459 @@
+/*
+ * acmod.c: support functions for use of Intel(r) TXT Authenticated
+ *          Code (AC) Modules
+ *
+ * Copyright (c) 2003-2011, Intel Corporation
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ *   * Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *   * Redistributions in binary form must reproduce the above
+ *     copyright notice, this list of conditions and the following
+ *     disclaimer in the documentation and/or other materials provided
+ *     with the distribution.
+ *   * Neither the name of the Intel Corporation nor the names of its
+ *     contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+/*
+ *  GRUB  --  GRand Unified Bootloader
+ *  Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ *
+ *  GRUB is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *
+ *  GRUB is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with GRUB.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <grub/loader.h>
+#include <grub/memory.h>
+#include <grub/normal.h>
+#include <grub/err.h>
+#include <grub/misc.h>
+#include <grub/types.h>
+#include <grub/dl.h>
+#include <grub/cpu/relocator.h>
+#include <grub/i386/cpuid.h>
+#include <grub/i386/msr.h>
+#include <grub/i386/txt.h>
+
+GRUB_MOD_LICENSE("GPLv3+");
+
+/*
+ * This checks to see if two numbers multiplied together are larger
+ *   than the type that they are.  Returns TRUE if OVERFLOWING.
+ *   If the first parameter "x" is greater than zero and
+ *   if that is true, that the largest possible value 0xFFFFFFFF / "x"
+ *   is less than the second parameter "y".  If "y" is zero then
+ *   it will also fail because no unsigned number is less than zero.
+ */
+static inline int
+multiply_overflow_u32(grub_uint32_t x, grub_uint32_t y)
+{
+  return (x > 0) ? ((((grub_uint32_t)(~0))/x) < y) : 0;
+}
+
+/*
+ *  These three "plus overflow" functions take a "x" value
+ *    and add the "y" value to it and if the two values are
+ *    greater than the size of the variable type, they will
+ *    overflow the type and end up with a smaller value and
+ *    return TRUE - that they did overflow.  i.e.
+ */
+static inline int plus_overflow_u32(grub_uint32_t x, grub_uint32_t y)
+{
+  return ((((grub_uint32_t)(~0)) - x) < y);
+}
+
+
+static struct grub_txt_acm_info_table*
+get_acmod_info_table(struct grub_txt_acm_header* hdr)
+{
+  grub_uint32_t user_area_off;
+
+  /* Overflow? */
+  if ( plus_overflow_u32 (hdr->header_len, hdr->scratch_size) )
+    {
+      /* TODO not sure how best to do logging in GRUB */
+      /*printk(TBOOT_ERR"ACM header length plus scratch size overflows\n");*/
+      return NULL;
+    }
+
+  if ( multiply_overflow_u32 ((hdr->header_len + hdr->scratch_size), 4) )
+    {
+      /*printk(TBOOT_ERR"ACM header length and scratch size in bytes overflows\n");*/
+      return NULL;
+    }
+
+
+  /* This fn assumes that the ACM has already passed at least the initial
+   * is_acmod() checks
+   */
+
+  user_area_off = (hdr->header_len + hdr->scratch_size) * 4;
+
+  /* Overflow? */
+  if ( plus_overflow_u32 (user_area_off, sizeof(struct grub_txt_acm_info_table)) )
+    {
+      /*printk(TBOOT_ERR"user_area_off plus acm_info_table_t size overflows\n");*/
+      return NULL;
+    }
+
+  /* Check that table is within module */
+  if ( user_area_off + sizeof(struct grub_txt_acm_info_table) > hdr->size*4 )
+    {
+      /*printk(TBOOT_ERR"ACM info table size too large: %x\n",
+               user_area_off + (uint32_t)sizeof(acm_info_table_t));*/
+      return NULL;
+    }
+
+  /* Overflow? */
+  if ( plus_overflow_u32 ((grub_uint32_t)(unsigned long)hdr, user_area_off) )
+    {
+      /*printk(TBOOT_ERR"hdr plus user_area_off overflows\n");*/
+      return NULL;
+    }
+
+    return (struct grub_txt_acm_info_table *)((unsigned long)hdr + user_area_off);
+}
+
+static struct grub_txt_acm_chipset_id_list*
+get_acmod_chipset_list(struct grub_txt_acm_header *hdr)
+{
+  struct grub_txt_acm_info_table *info_table;
+  grub_uint32_t size, id_list_off;
+  struct grub_txt_acm_chipset_id_list *chipset_id_list;
+
+  /* This fn assumes that the ACM has already passed the is_acmod() checks */
+
+  info_table = get_acmod_info_table (hdr);
+  if ( info_table == NULL )
+    return NULL;
+  id_list_off = info_table->chipset_id_list;
+
+  size = hdr->size * 4;
+
+  /* Overflow? */
+  if ( plus_overflow_u32 (id_list_off, sizeof(struct grub_txt_acm_chipset_id)) )
+    {
+      /*printk(TBOOT_ERR"id_list_off plus acm_chipset_id_t size overflows\n");*/
+      return NULL;
+    }
+
+  /* Check that chipset id table is w/in ACM */
+  if ( id_list_off + sizeof(struct grub_txt_acm_chipset_id) > size )
+    {
+      /*printk(TBOOT_ERR"ACM chipset id list is too big: chipset_id_list=%x\n",
+               id_list_off);*/
+      return NULL;
+    }
+
+  /* Overflow? */
+  if ( plus_overflow_u32 ((grub_uint32_t)(unsigned long)hdr, id_list_off) )
+    {
+      /*printk(TBOOT_ERR"hdr plus id_list_off overflows\n");*/
+      return NULL;
+    }
+
+  chipset_id_list = (struct grub_txt_acm_chipset_id_list*)
+                    ((unsigned long)hdr + id_list_off);
+
+  /* Overflows? */
+  if ( multiply_overflow_u32 (chipset_id_list->count,
+                              sizeof(struct grub_txt_acm_chipset_id)) )
+    {
+      /*printk(TBOOT_ERR"size of acm_chipset_id_list overflows\n");*/
+      return NULL;
+    }
+
+  if ( plus_overflow_u32 (id_list_off + sizeof(struct grub_txt_acm_chipset_id),
+        chipset_id_list->count * sizeof(struct grub_txt_acm_chipset_id)) )
+    {
+      /*printk(TBOOT_ERR"size of all entries overflows\n");*/
+      return NULL;
+    }
+
+  /* Check that all entries are w/in ACM */
+  if ( id_list_off + sizeof(struct grub_txt_acm_chipset_id) +
+       chipset_id_list->count * sizeof(struct grub_txt_acm_chipset_id) > size )
+    {
+      /*printk(TBOOT_ERR"ACM chipset id entries are too big:"
+               " chipset_id_list->count=%x\n", chipset_id_list->count);*/
+      return NULL;
+    }
+
+  return chipset_id_list;
+}
+
+static struct grub_txt_acm_processor_id_list*
+get_acmod_processor_list(struct grub_txt_acm_header* hdr)
+{
+  struct grub_txt_acm_info_table *info_table;
+  grub_uint32_t size, id_list_off;
+  struct grub_txt_acm_processor_id_list *proc_id_list;
+
+  /* This fn assumes that the ACM has already passed the is_acmod() checks */
+
+  info_table = get_acmod_info_table(hdr);
+  if ( info_table == NULL )
+    return NULL;
+  id_list_off = info_table->processor_id_list;
+
+  size = hdr->size * 4;
+
+  /* Overflow? */
+  if ( plus_overflow_u32 (id_list_off, sizeof(struct grub_txt_acm_processor_id)) )
+    {
+      /*printk(TBOOT_ERR"id_list_off plus acm_processor_id_t size overflows\n");*/
+      return NULL;
+    }
+
+  /* Check that processor id table is w/in ACM */
+  if ( id_list_off + sizeof(struct grub_txt_acm_processor_id) > size )
+    {
+      /*printk(TBOOT_ERR"ACM processor id list is too big: processor_id_list=%x\n",
+               id_list_off);*/
+      return NULL;
+    }
+
+  /* Overflow? */
+  if ( plus_overflow_u32 ((unsigned long)hdr, id_list_off) )
+    {
+      /*printk(TBOOT_ERR"hdr plus id_list_off overflows\n");*/
+      return NULL;
+    }
+
+  proc_id_list = (struct grub_txt_acm_processor_id_list *)
+                             ((unsigned long)hdr + id_list_off);
+
+  /* Overflows? */
+  if ( multiply_overflow_u32 (proc_id_list->count,
+             sizeof(struct grub_txt_acm_processor_id)) )
+    {
+      /*printk(TBOOT_ERR"size of acm_processor_id_list overflows\n");*/
+      return NULL;
+    }
+
+  if ( plus_overflow_u32 (id_list_off + sizeof(struct grub_txt_acm_processor_id),
+        proc_id_list->count * sizeof(struct grub_txt_acm_processor_id)) )
+    {
+      /*printk(TBOOT_ERR"size of all entries overflows\n");*/
+      return NULL;
+    }
+
+  /* Check that all entries are w/in ACM */
+  if ( id_list_off + sizeof(struct grub_txt_acm_processor_id) +
+         proc_id_list->count * sizeof(struct grub_txt_acm_processor_id) > size )
+    {
+      /*printk(TBOOT_ERR"ACM processor id entries are too big:"
+               " proc_id_list->count=%x\n", proc_id_list->count);*/
+      return NULL;
+    }
+
+  return proc_id_list;
+}
+
+static int
+is_acmod(const void *acmod_base, grub_uint32_t acmod_size,
+         grub_uint8_t *type_out)
+{
+  struct grub_txt_acm_header *acm_hdr =
+    (struct grub_txt_acm_header *)acmod_base;
+  struct grub_txt_acm_info_table *info_table;
+  grub_uint8_t version;
+
+  /* First check size */
+  if ( acmod_size < sizeof(struct grub_txt_acm_header) )
+    return 0;
+
+  /* Then check overflow */
+  if ( multiply_overflow_u32 (acm_hdr->size, 4) )
+    return 0;
+
+  /* Then check size equivalency */
+  if ( acmod_size != acm_hdr->size * 4 )
+    return 0;
+
+  /* Then check type and vendor */
+  if ( (acm_hdr->module_type != GRUB_TXT_ACM_MODULE_TYPE) ||
+       (acm_hdr->module_vendor != GRUB_TXT_ACM_MODULE_VENDOR_INTEL) )
+    return 0;
+
+  info_table = get_acmod_info_table (acm_hdr);
+  if ( !info_table )
+    return 0;
+
+  /* Check if ACM UUID is present */
+  if ( grub_memcmp (&(info_table->uuid), GRUB_TXT_ACM_UUID, 16) )
+    return 0;
+
+  if ( type_out )
+    *type_out = info_table->chipset_acm_type;
+
+  version = ( (grub_uint8_t)(info_table->acm_version_revision >> 24) & 0xff );
+  if ( version < 3 )
+    return 0;
+
+  return 1;
+}
+
+int
+grub_txt_is_sinit_acmod(const void *acmod_base, grub_uint32_t acmod_size)
+{
+  grub_uint8_t type;
+
+  if ( !is_acmod (acmod_base, acmod_size, &type) )
+    return 0;
+
+  if ( type != GRUB_TXT_ACM_CHIPSET_TYPE_SINIT )
+    return 0;
+
+  return 1;
+}
+
+int
+grub_txt_acmod_match_platform(struct grub_txt_acm_header *hdr)
+{
+  union grub_txt_didvid didvid;
+  grub_uint32_t ver, fms, ign, i;
+  grub_uint64_t platform_id;
+  struct grub_txt_acm_chipset_id_list *chipset_id_list;
+  struct grub_txt_acm_chipset_id *chipset_id;
+  struct grub_txt_acm_processor_id_list *proc_id_list;
+  struct grub_txt_acm_processor_id *proc_id;
+  struct grub_txt_acm_info_table *info_table;
+
+  /* This fn assumes that the ACM has already passed the is_acmod() checks */
+
+  /* Get chipset fusing, device, and vendor id info */
+  didvid.value = grub_txt_read_reg (GRUB_TXT_DIDVID, 1);
+
+  ver = grub_txt_read_reg (GRUB_TXT_VER_FSBIF, 1);
+  if ( (ver & 0xffffffff) == 0xffffffff ||
+       (ver & 0xffffffff) == 0x00 ) /* Need to use VER.QPIIF */
+    ver = grub_txt_read_reg (GRUB_TXT_VER_QPIIF, 1);
+
+  /* TODO how to deal with debug logging
+  if ( !printed_host_info )
+    {
+      printk(TBOOT_DETA"chipset production fused: %x\n", ver.prod_fused );
+      printk(TBOOT_DETA"chipset ids: vendor: 0x%x, device: 0x%x, revision: 0x%x\n",
+             didvid.vendor_id, didvid.device_id, didvid.revision_id);
+    }*/
+
+  grub_cpuid (1, fms, ign, ign, ign);
+  platform_id = grub_rdmsr (GRUB_MSR_X86_PLATFORM_ID);
+  /*if ( !printed_host_info )
+    {
+      printk(TBOOT_DETA"processor family/model/stepping: 0x%x\n", fms );
+      printk(TBOOT_DETA"platform id: 0x%Lx\n", (unsigned long long)platform_id);
+    }*/
+
+  /* Check if chipset fusing is same. Note the DEBUG.FUSE bit in the version
+   * is 0 when debug fused so the logic below checking a mismatch is valid.
+   */
+  if ( (ver & GRUB_TXT_VERSION_DEBUG_FUSED) &&
+       (hdr->flags & GRUB_TXT_ACM_FLAG_DEBUG_SIGNED) )
+    {
+      /*printk(TBOOT_ERR"\t production/debug mismatch between chipset and ACM\n");*/
+      return 0;
+    }
+
+  /* Check if chipset vendor/device/revision IDs match */
+  chipset_id_list = get_acmod_chipset_list (hdr);
+  if ( chipset_id_list == NULL )
+    return 0;
+
+  /*printk(TBOOT_DETA"\t %x ACM chipset id entries:\n", chipset_id_list->count);*/
+  chipset_id = (struct grub_txt_acm_chipset_id *)
+                ((grub_uint8_t*)chipset_id_list + chipset_id_list->count);
+  for (i = 0; i < chipset_id_list->count; i++)
+    {
+      /*printk(TBOOT_DETA"\t     vendor: 0x%x, device: 0x%x, flags: 0x%x, "
+               "revision: 0x%x, extended: 0x%x\n",
+               (uint32_t)chipset_id->vendor_id,
+               (uint32_t)chipset_id->device_id, chipset_id->flags,
+               (uint32_t)chipset_id->revision_id, chipset_id->extended_id);*/
+
+      if ( (didvid.vid == chipset_id->vendor_id ) &&
+           (didvid.did == chipset_id->device_id ) &&
+           ( ( ( (chipset_id->flags & GRUB_TXT_ACM_REVISION_ID_MASK) == 0) &&
+                 (didvid.rid == chipset_id->revision_id) ) ||
+               ( ( (chipset_id->flags & GRUB_TXT_ACM_REVISION_ID_MASK) == 1) &&
+                 ( (didvid.rid & chipset_id->revision_id) != 0 ) ) ) )
+            break;
+      chipset_id++;
+    }
+
+  if ( i >= chipset_id_list->count )
+    {
+      /*printk(TBOOT_ERR"\t chipset id mismatch\n");*/
+      return 0;
+    }
+
+  /* Check if processor family/model/stepping and platform IDs match */
+  info_table = get_acmod_info_table (hdr);
+  if ( info_table == NULL )
+    return 0;
+
+  /* Logic inverted from oringal to avoid he if block. Note sure what drives
+   * the logic of not checking processor infrmation for version 4 or less.
+   */
+  if ( info_table->version < 4 )
+    return 1;
+
+  proc_id_list = get_acmod_processor_list(hdr);
+  if ( proc_id_list == NULL )
+    return 1;
+
+  /*printk(TBOOT_DETA"\t %x ACM processor id entries:\n", proc_id_list->count);*/
+  proc_id = (struct grub_txt_acm_processor_id *)
+                ((grub_uint8_t*)proc_id_list + proc_id_list->count);
+  for (i = 0; i < proc_id_list->count; i++)
+    {
+      /*printk(TBOOT_DETA"\t     fms: 0x%x, fms_mask: 0x%x, platform_id: 0x%Lx, "
+               "platform_mask: 0x%Lx\n",
+               proc_id->fms, proc_id->fms_mask,
+               (unsigned long long)proc_id->platform_id,
+               (unsigned long long)proc_id->platform_mask);*/
+
+      if ( (proc_id->fms == (fms & proc_id->fms_mask)) &&
+           (proc_id->platform_id == (platform_id & proc_id->platform_mask)) )
+        break;
+    }
+
+  if ( i >= proc_id_list->count )
+    {
+      /*printk(TBOOT_ERR"\t chipset id mismatch\n");*/
+      return 0;
+    }
+
+  return 1;
+}
-- 
2.13.6

