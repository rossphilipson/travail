From 21c4013f5ddf03c840d22423c0ac8d3b5d6453bb Mon Sep 17 00:00:00 2001
From: Ross Philipson <ross.philipson@oracle.com>
Date: Wed, 7 Aug 2019 13:57:33 -0400
Subject: [PATCH 3/7] txt: Add Intel TXT core implementation

Signed-off-by: Ross Philipson <ross.philipson@oracle.com>
---
 grub-core/Makefile.core.def     |   6 +
 grub-core/loader/i386/txt/txt.c | 913 ++++++++++++++++++++++++++++++++++++++++
 2 files changed, 919 insertions(+)
 create mode 100644 grub-core/loader/i386/txt/txt.c

diff --git a/grub-core/Makefile.core.def b/grub-core/Makefile.core.def
index 269370417..c2b84d7e0 100644
--- a/grub-core/Makefile.core.def
+++ b/grub-core/Makefile.core.def
@@ -1807,6 +1807,12 @@ module = {
 };
 
 module = {
+  name = slaunch;
+  x86 = loader/i386/txt/txt.c;
+  enable = x86;
+};
+
+module = {
   name = fdt;
   efi = loader/efi/fdt.c;
   common = lib/fdt.c;
diff --git a/grub-core/loader/i386/txt/txt.c b/grub-core/loader/i386/txt/txt.c
new file mode 100644
index 000000000..bd663a720
--- /dev/null
+++ b/grub-core/loader/i386/txt/txt.c
@@ -0,0 +1,913 @@
+/*
+ * txt.c: Intel(r) TXT support functions, including initiating measured
+ *        launch, post-launch, AP wakeup, etc.
+ *
+ * Copyright (c) 2003-2011, Intel Corporation
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ *   * Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *   * Redistributions in binary form must reproduce the above
+ *     copyright notice, this list of conditions and the following
+ *     disclaimer in the documentation and/or other materials provided
+ *     with the distribution.
+ *   * Neither the name of the Intel Corporation nor the names of its
+ *     contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+/*
+ *  GRUB  --  GRand Unified Bootloader
+ *  Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ *
+ *  GRUB is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *
+ *  GRUB is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with GRUB.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <grub/loader.h>
+#include <grub/memory.h>
+#include <grub/normal.h>
+#include <grub/err.h>
+#include <grub/misc.h>
+#include <grub/types.h>
+#include <grub/dl.h>
+#include <grub/acpi.h>
+#include <grub/cpu/relocator.h>
+#include <grub/i386/cpuid.h>
+#include <grub/i386/msr.h>
+#include <grub/i386/crfr.h>
+#include <grub/i386/txt.h>
+#include <grub/i386/linux.h>
+
+GRUB_MOD_LICENSE("GPLv3+");
+
+/* TODO make as much of the txt support code as implementation
+ * non-specific as possible in a clean room implementation.
+ */
+
+#define GRUB_SMX_ALL_CAPABILITIES \
+  (GRUB_SMX_CAPABILITY_ENTERACCS | \
+   GRUB_SMX_CAPABILITY_EXITAC | \
+   GRUB_SMX_CAPABILITY_SENTER | \
+   GRUB_SMX_CAPABILITY_SEXIT | \
+   GRUB_SMX_CAPABILITY_PARAMETERS | \
+   GRUB_SMX_CAPABILITY_SMCTRL | \
+   GRUB_SMX_CAPABILITY_WAKEUP)
+
+static int
+param_prefer_da(void)
+{
+  /* TODO some command line support is needed. There are several parameters
+   * that need to be support. Current list:
+   * prefer_da - this one
+   * min_ram - or whatever its replacement is
+   * extpol - this one has to do with evt logging work that needs doing.
+   * tpm_ver - 1.2 or 2.0 mode; not a cmdline arg but slaunch knows which.
+   *
+   * The slaunch framework should pass these in via some initializer function.
+   * They will also need defaults.
+   */
+  return 0; /* just for now */
+}
+
+grub_err_t
+grub_txt_enable_smx_mode (void)
+{
+  grub_uint32_t caps;
+  grub_err_t err;
+  const char *msg;
+
+  grub_write_control_register (GRUB_CR4,
+    grub_read_control_register (GRUB_CR4) | GRUB_CR4_X86_SMXE);
+
+  caps = grub_txt_getsec_capabilities (0);
+
+  if ( !(caps & GRUB_SMX_CAPABILITY_CHIPSET_PRESENT) )
+    {
+      err = GRUB_ERR_BAD_DEVICE;
+      msg = "TXT capable chipset not present";
+      goto fail;
+    }
+
+  if ( (caps & GRUB_SMX_ALL_CAPABILITIES) != GRUB_SMX_ALL_CAPABILITIES )
+    {
+      err = GRUB_ERR_BAD_DEVICE;
+      msg = "Not all SMX capagilities are supported";
+      goto fail;
+    }
+
+
+  return GRUB_ERR_NONE;
+
+fail:
+  /* Disable SMX mode on failure */
+  grub_write_control_register (GRUB_CR4,
+    grub_read_control_register (GRUB_CR4) & ~GRUB_CR4_X86_SMXE);
+
+  return grub_error (err, N_(msg));
+}
+
+void
+grub_txt_smx_parameters (struct grub_smx_parameters *params)
+{
+  grub_uint32_t index = 0, eax, ebx, ecx, param_type;
+
+  grub_memset (params, 0, sizeof(struct grub_smx_supported_versions));
+  params->max_acm_size = GRUB_SMX_DEFAULT_MAX_ACM_SIZE;
+  params->acm_memory_types = GRUB_SMX_DEFAULT_ACM_MEMORY_TYPE;
+  params->senter_controls = GRUB_SMX_DEFAULT_SENTER_CONTROLS;
+
+  do
+    {
+      grub_txt_getsec_parameters (index, &eax, &ebx, &ecx);
+      param_type = eax & GRUB_SMX_PARAMETER_TYPE_MASK;
+
+      switch ( param_type )
+        {
+        case GRUB_SMX_PARAMETER_NULL:
+          break; /* this means done */
+        case GRUB_SMX_PARAMETER_ACM_VERSIONS:
+          if ( params->version_count == GRUB_SMX_PARAMETER_MAX_VERSIONS )
+            {
+              /* TODO log warning about too many versions */
+              break;
+            }
+          params->versions[params->version_count].mask = ebx;
+          params->versions[params->version_count++].version = ecx;
+          break;
+      case GRUB_SMX_PARAMETER_MAX_ACM_SIZE:
+        params->max_acm_size = GRUB_SMX_GET_MAX_ACM_SIZE (eax);
+        break;
+      case GRUB_SMX_PARAMETER_ACM_MEMORY_TYPES:
+        params->acm_memory_types = GRUB_SMX_GET_ACM_MEMORY_TYPES (eax);
+        break;
+      case GRUB_SMX_PARAMETER_SENTER_CONTROLS:
+        params->senter_controls = GRUB_SMX_GET_SENTER_CONTROLS (eax);
+        break;
+      case GRUB_SMX_PARAMETER_TXT_EXTENSIONS:
+        params->txt_feature_ext_flags = GRUB_SMX_GET_TXT_EXT_FEATURES (eax);
+        break;
+      default:
+        /* TODO log warning about unknown param */
+        param_type = GRUB_SMX_PARAMETER_NULL;
+    }
+  } while ( param_type != GRUB_SMX_PARAMETER_NULL );
+
+  /* If no ACM versions were found, set the default one */
+  if ( !params->version_count )
+    {
+      params->versions[0].mask = GRUB_SMX_DEFAULT_VERSION_MASK;
+      params->versions[0].version = GRUB_SMX_DEFAULT_VERSION;
+      params->version_count++;
+    }
+}
+
+grub_err_t
+grub_txt_prepare_cpu (void)
+{
+  unsigned long eflags, cr0;
+  grub_uint64_t mcg_cap, mcg_stat;
+  struct grub_smx_parameters params;
+  grub_uint32_t i;
+
+  cr0 = grub_read_control_register (GRUB_CR0);
+
+  /* Must be in either IA-32e or protected mode */
+#ifdef __x86_64__
+  {
+    grub_uint64_t efer;
+    efer = grub_rdmsr (GRUB_MSR_X86_EFER);
+    if ( !(efer & GRUB_MSR_EFER_LMA) )
+      return grub_error (GRUB_ERR_BAD_DEVICE,
+              N_("system must be in IA-32e mode to do secure launch"));
+  }
+#else
+  if ( !(cr0 & GRUB_CR0_X86_PE) )
+    return grub_error (GRUB_ERR_BAD_DEVICE,
+            N_("system must be in protected mode to do secure launch"));
+#endif
+
+  /* Cache must be enabled (CR0.CD = CR0.NW = 0) */
+  if ( cr0 & GRUB_CR0_X86_CD )
+    cr0 &= ~GRUB_CR0_X86_CD;
+
+  if ( cr0 & GRUB_CR0_X86_NW )
+    cr0 &= ~GRUB_CR0_X86_NW;
+
+  /* Native FPU error reporting must be enabled for proper
+   * interaction behavior.
+   */
+  if ( !(cr0 & GRUB_CR0_X86_NE) )
+    cr0 |= GRUB_CR0_X86_NE;
+
+  grub_write_control_register (GRUB_CR0, cr0);
+
+  /* Cannot be in virtual-8086 mode (EFLAGS.VM=1) */
+  eflags = grub_read_flags_register ();
+  if ( eflags & GRUB_EFLAGS_X86_VM )
+    grub_write_flags_register (eflags | ~GRUB_EFLAGS_X86_VM);
+
+  /*printk(TBOOT_INFO"CR0 and EFLAGS OK\n");*/
+
+
+  /* Verify all machine check status registers are clear (unless
+   * support preserving them).
+   */
+
+  /* No machine check in progress (IA32_MCG_STATUS.MCIP=1) */
+  mcg_stat = grub_rdmsr (GRUB_MSR_X86_MCG_STATUS);
+  if ( mcg_stat & GRUB_MSR_MCG_STATUS_MCIP )
+    return grub_error (GRUB_ERR_BAD_DEVICE,
+            N_("machine check in progress during secure launch"));
+
+  grub_txt_smx_parameters (&params);
+
+  /* Check if all machine check regs are clear */
+  mcg_cap = grub_rdmsr (GRUB_MSR_X86_MCG_CAP);
+  for ( i = 0; i < (mcg_cap & GRUB_MSR_MCG_BANKCNT_MASK); i++ )
+    {
+      mcg_stat = grub_rdmsr (GRUB_MSR_X86_MC0_STATUS + 4*i);
+      if ( mcg_stat & (1ULL << 63) )
+        {
+          if ( !(params.txt_feature_ext_flags & GRUB_SMX_MACHINE_CHECK_HANLDING) )
+            return grub_error (GRUB_ERR_BAD_DEVICE,
+                      N_("secure launch MCG[%u] = %Lx ERROR"), i, mcg_stat);
+        }
+    }
+
+  /* TODO logging maybe...
+  if ( params.txt_feature_ext_flags & GRUB_SMX_MACHINE_CHECK_HANLDING )
+    printk(TBOOT_INFO"supports preserving machine check errors\n");
+  else
+    printk(TBOOT_INFO"no machine check errors\n");
+
+  if ( params.txt_feature_ext_flags & GRUB_SMX_PROCESSOR_BASE_SCRTM )
+    printk(TBOOT_INFO"CPU support processor-based S-CRTM\n");
+  */
+
+  return GRUB_ERR_NONE;
+}
+
+#define PAGE_SHIFT	12
+#define PAGE_SIZE	(1 << PAGE_SHIFT)
+#define PAGE_MASK	(~(PAGE_SIZE - 1))
+#define PAGE_UP(p)	(((unsigned long)(p) + PAGE_SIZE - 1) & PAGE_MASK)
+
+#define SLBOOT_AP_WAKE_BLOCK_ADDR	0x68000
+#define SLBOOT_AP_WAKE_BLOCK_SIZE	0x01000
+
+#define SLBOOT_MLEPT_ADDR		0x6B000 /* 0x6B000 to 0x80000 */
+#define SLBOOT_MLEPT_PAGES		20
+#define SLBOOT_MLEPT_SIZE		(PAGE_SIZE*SLBOOT_MLEPT_PAGES)
+#define SLBOOT_MLEPT_PAGE_TABLES	(SLBOOT_MLEPT_PAGES - 2)
+#define SLBOOT_MLEPT_PAGES_COVERED	(SLBOOT_MLEPT_PAGE_TABLES*512)
+#define SLBOOT_MLEPT_BYTES_COVERED	(SLBOOT_MLEPT_PAGES_COVERED*PAGE_SIZE)
+
+/* Page directory and table entries only need Present set */
+#define MAKE_PT_ENTRY(addr)  (((grub_uint64_t)(unsigned long)(addr) & PAGE_MASK) | 0x01)
+
+/* The MLE page tables have to be below the MLE and have no special regions in
+ * between them and the MLE (this is a bit of an unwritten rule).
+ * 20 pages are carved out of memory below the MLE. That leave 18 page table
+ * pages that can cover up to 36M .
+ * can only contain 4k pages
+ */
+static void*
+setup_mle_pagetables (grub_uint32_t mle_start, grub_uint32_t mle_size,
+                     void *ptab_base, grub_uint32_t ptab_size)
+{
+  grub_uint32_t mle_off, pd_off;
+  grub_uint8_t *pg_dir_ptr_tab, *pg_dir, *pg_tab;
+  grub_uint64_t *pte, *pde;
+
+  /* TODO
+  printk(TBOOT_DETA"MLE start=0x%x, end=0x%x, size=0x%x\n",
+           mle_start, mle_start+mle_size, mle_size);*/
+
+  grub_memset (ptab_base, 0, ptab_size);
+  /*printk(TBOOT_DETA"ptab_size=%x, ptab_base=%p\n", ptab_size, ptab_base);*/
+
+  pg_dir_ptr_tab = ptab_base;
+  pg_dir         = pg_dir_ptr_tab + PAGE_SIZE;
+  pg_tab         = pg_dir + PAGE_SIZE;
+
+  /* Only use first entry in page dir ptr table */
+  *(grub_uint64_t *)pg_dir_ptr_tab = MAKE_PT_ENTRY(pg_dir);
+
+  /* Start with first entry in page dir */
+  *(grub_uint64_t *)pg_dir = MAKE_PT_ENTRY(pg_tab);
+
+  pte = (grub_uint64_t*)pg_tab;
+  pde = (grub_uint64_t*)pg_dir;
+  mle_off = 0;
+  pd_off = 0;
+
+  do
+    {
+      *pte = MAKE_PT_ENTRY(mle_start + mle_off);
+
+      pte++;
+      mle_off += PAGE_SIZE;
+
+      pd_off++;
+      if ( !(pd_off % 512) )
+        {
+          /* Break if we don't need any additional page entries */
+          if (mle_off >= mle_size)
+            break;
+          pde++;
+          *pde = MAKE_PT_ENTRY(pte);
+        }
+    } while ( mle_off < mle_size );
+
+  return ptab_base;
+}
+
+#define MIN_OS_SINIT_DATA_VER	4
+#define MAX_OS_SINIT_DATA_VER	7
+
+/*
+ * Make sure version is in [MIN_OS_SINIT_DATA_VER, MAX_OS_SINIT_DATA_VER]
+ * before calling calc_os_sinit_data_size
+ */
+static grub_uint64_t
+calc_os_sinit_data_size (grub_uint32_t version)
+{
+    /* TODO need help figuring out how this works
+    uint64_t size[] = {
+        offsetof(os_sinit_data_t, efi_rsdt_ptr) + sizeof(uint64_t),
+        sizeof(os_sinit_data_t) + sizeof(uint64_t),
+        sizeof(os_sinit_data_t) + sizeof(uint64_t) +
+            2 * sizeof(heap_ext_data_element_t) +
+            sizeof(heap_event_log_ptr_elt_t)
+    };
+    struct tpm_if *tpm = get_tpm();
+    int log_type = get_evtlog_type();
+
+    if ( log_type == EVTLOG_TPM2_TCG ) {
+        size[2] = sizeof(os_sinit_data_t) + sizeof(uint64_t) +
+        2 * sizeof(heap_ext_data_element_t) +
+        sizeof(heap_event_log_ptr_elt2_1_t);
+    } else if (log_type == EVTLOG_TPM2_LEGACY) {
+        u32 count;
+        if ( tpm->extpol == TB_EXTPOL_AGILE )
+            count = tpm->banks;
+        else
+            if ( tpm->extpol == TB_EXTPOL_EMBEDDED )
+                count = tpm->alg_count;
+            else
+                count = 1;
+        size[2] = sizeof(os_sinit_data_t) + sizeof(uint64_t) +
+            2 * sizeof(heap_ext_data_element_t) + 4 +
+            count*sizeof(heap_event_log_descr_t);
+    }
+
+    if ( version >= 6 )
+        return size[2];
+    else
+        return size[version - MIN_OS_SINIT_DATA_VER];*/
+
+  version = version;
+  return 0;
+}
+
+/* Current procs only have 10, so this should hold us for a while */
+#define MAX_VARIABLE_MTRRS	32
+
+static void
+save_mtrrs (struct grub_slaunch_mtrr_state *saved_state)
+{
+  grub_uint64_t mtrr_cap;
+  unsigned int ndx;
+
+  /* IA32_MTRR_DEF_TYPE MSR */
+  saved_state->default_mem_type =
+    grub_rdmsr (GRUB_MSR_X86_MTRR_DEF_TYPE) & GRUB_MSR_X86_DEF_TYPE_MASK;
+
+  /* Number variable MTTRRs */
+  mtrr_cap = grub_rdmsr (GRUB_MSR_X86_MTRRCAP);
+  if ( (mtrr_cap & GRUB_MSR_X86_VCNT_MASK)  > MAX_VARIABLE_MTRRS )
+    {
+      /* TODO print warning but continue saving what we can
+       * (set_mem_type() won't exceed the array, so we're safe doing this)
+        printk(TBOOT_WARN"actual # var MTRRs (%d) > MAX_VARIABLE_MTRRS (%d)\n",
+               mtrr_cap.vcnt, MAX_VARIABLE_MTRRS);*/
+      saved_state->mtrr_vcnt = MAX_VARIABLE_MTRRS;
+    }
+  else
+    saved_state->mtrr_vcnt = (mtrr_cap & GRUB_MSR_X86_VCNT_MASK);
+
+  /* Physmask's and Physbase's */
+  for ( ndx = 0; ndx < saved_state->mtrr_vcnt; ndx++ )
+    {
+      saved_state->mtrr_pair[ndx].mtrr_physmask =
+        grub_rdmsr (GRUB_MSR_X86_MTRR_PHYSMASK0 + ndx*2);
+      saved_state->mtrr_pair[ndx].mtrr_physbase =
+        grub_rdmsr (GRUB_MSR_X86_MTRR_PHYSBASE0 + ndx*2);
+    }
+}
+
+static void
+set_all_mtrrs (int enable)
+{
+  grub_uint64_t mtrr_def_type;
+
+  mtrr_def_type = grub_rdmsr (GRUB_MSR_X86_MTRR_DEF_TYPE);
+
+  if ( enable )
+    mtrr_def_type |= GRUB_MSR_X86_MTRR_ENABLE;
+  else
+    mtrr_def_type &= ~GRUB_MSR_X86_MTRR_ENABLE;
+
+  grub_wrmsr (GRUB_MSR_X86_MTRR_DEF_TYPE, mtrr_def_type);
+}
+
+#define SINIT_MTRR_MASK         0xFFFFFF  /* SINIT requires 36b mask */
+
+union mtrr_physbase_t
+{
+  grub_uint64_t raw;
+  struct
+  {
+    grub_uint64_t type      : 8;
+    grub_uint64_t reserved1 : 4;
+    grub_uint64_t base      : 52; /* Define as max width and mask w/ */
+                                  /* MAXPHYADDR when using */
+  };
+} GRUB_PACKED;
+
+union mtrr_physmask_t
+{
+  grub_uint64_t raw;
+  struct
+  {
+    grub_uint64_t reserved1 : 11;
+    grub_uint64_t v         : 1;      /* valid */
+    grub_uint64_t mask      : 52;     /* define as max width and mask w/ */
+                                      /* MAXPHYADDR when using */
+  };
+} GRUB_PACKED;
+
+static inline grub_uint32_t
+bsrl (grub_uint32_t mask)
+{
+  grub_uint32_t result;
+
+  asm ("bsrl %1,%0" : "=r" (result) : "rm" (mask) : "cc");
+
+  return result;
+}
+
+static inline int
+fls (int mask)
+{
+  return (mask == 0 ? mask : (int)bsrl ((grub_uint32_t)mask) + 1);
+}
+
+/*
+ * set the memory type for specified range (base to base+size)
+ * to mem_type and everything else to UC
+ */
+static grub_err_t
+set_mtrr_mem_type (const grub_uint8_t *base, grub_uint32_t size,
+                   grub_uint32_t mem_type)
+{
+  grub_uint64_t mtrr_def_type;
+  grub_uint64_t mtrr_cap;
+  union mtrr_physbase_t mtrr_physbase;
+  union mtrr_physmask_t mtrr_physmask;
+  grub_uint32_t vcnt, pages_in_range;
+  unsigned long ndx, base_v;
+  int i = 0, j, num_pages, mtrr_s;
+
+  /* Disable all fixed MTRRs, set default type to UC */
+  mtrr_def_type = grub_rdmsr (GRUB_MSR_X86_MTRR_DEF_TYPE);
+  mtrr_def_type &= ~GRUB_MSR_X86_MTRR_ENABLE_FIXED;
+  mtrr_def_type |= (GRUB_MSR_X86_DEF_TYPE_MASK|GRUB_MTRR_MEMORY_TYPE_UC);
+  grub_wrmsr (GRUB_MSR_X86_MTRR_DEF_TYPE, mtrr_def_type);
+
+  /* Initially disable all variable MTRRs (we'll enable the ones we use) */
+  mtrr_cap = grub_rdmsr (GRUB_MSR_X86_MTRRCAP);
+  vcnt = (mtrr_cap & GRUB_MSR_X86_VCNT_MASK);
+
+  for ( ndx = 0; ndx < vcnt; ndx++ )
+    {
+      mtrr_physmask.raw = grub_rdmsr (GRUB_MSR_X86_MTRR_PHYSMASK0 + ndx*2);
+      mtrr_physmask.v = 0;
+      grub_wrmsr (GRUB_MSR_X86_MTRR_PHYSMASK0 + ndx*2, mtrr_physmask.raw);
+    }
+
+  /* Map all AC module pages as mem_type */
+  num_pages = PAGE_UP(size) >> PAGE_SHIFT;
+
+  /*printk(TBOOT_DETA"setting MTRRs for acmod: base=%p, size=%x, num_pages=%d\n",
+           base, size, num_pages);*/
+
+  /* Each VAR MTRR base must be a multiple if that MTRR's Size */
+  base_v = (unsigned long)base;
+  /* MTRR size in pages */
+  mtrr_s = 1;
+
+  while ( (base_v & 0x01) == 0 )
+    {
+      i++;
+      base_v = base_v >> 1;
+    }
+
+  for (j = i - 12; j > 0; j--)
+     mtrr_s = mtrr_s*2; /* mtrr_s = mtrr_s << 1 */
+
+  /*printk(TBOOT_DETA"The maximum allowed MTRR range size=%d Pages \n", mtrr_s);*/
+
+  while ( num_pages >= mtrr_s )
+    {
+      mtrr_physbase.raw = grub_rdmsr (GRUB_MSR_X86_MTRR_PHYSBASE0 + ndx*2);
+      mtrr_physbase.base = ((unsigned long)base >> PAGE_SHIFT) &
+	                     SINIT_MTRR_MASK;
+      mtrr_physbase.type = mem_type;
+      grub_wrmsr (GRUB_MSR_X86_MTRR_PHYSBASE0 + ndx*2, mtrr_physbase.raw);
+
+      mtrr_physmask.raw = grub_rdmsr (GRUB_MSR_X86_MTRR_PHYSMASK0 + ndx*2);
+      mtrr_physmask.mask = ~(mtrr_s - 1) & SINIT_MTRR_MASK;
+      mtrr_physmask.v = 1;
+      grub_wrmsr (GRUB_MSR_X86_MTRR_PHYSMASK0 + ndx*2, mtrr_physmask.raw);
+
+      base += (mtrr_s * PAGE_SIZE);
+      num_pages -= mtrr_s;
+      ndx++;
+      if ( ndx == vcnt )
+        {
+          /*printk(TBOOT_ERR"exceeded number of var MTRRs when mapping range\n");*/
+          return GRUB_ERR_BAD_DEVICE;
+        }
+    }
+
+  while ( num_pages > 0 )
+    {
+      /* Set the base of the current MTRR */
+      mtrr_physbase.raw = grub_rdmsr (GRUB_MSR_X86_MTRR_PHYSBASE0 + ndx*2);
+      mtrr_physbase.base = ((unsigned long)base >> PAGE_SHIFT) &
+                            SINIT_MTRR_MASK;
+      mtrr_physbase.type = mem_type;
+      grub_wrmsr (GRUB_MSR_X86_MTRR_PHYSBASE0 + ndx*2, mtrr_physbase.raw);
+
+      /*
+       * Calculate MTRR mask
+       * MTRRs can map pages in power of 2
+       * may need to use multiple MTRRS to map all of region
+       */
+      pages_in_range = 1 << (fls (num_pages) - 1);
+
+      mtrr_physmask.raw = grub_rdmsr (GRUB_MSR_X86_MTRR_PHYSMASK0 + ndx*2);
+      mtrr_physmask.mask = ~(pages_in_range - 1) & SINIT_MTRR_MASK;
+      mtrr_physmask.v = 1;
+      grub_wrmsr (GRUB_MSR_X86_MTRR_PHYSMASK0 + ndx*2, mtrr_physmask.raw);
+
+      /*
+       * Prepare for the next loop depending on number of pages
+       * We figure out from the above how many pages could be used in this
+       * mtrr. Then we decrement the count, increment the base,
+       * increment the mtrr we are dealing with, and if num_pages is
+       * still not zero, we do it again.
+       */
+      base += (pages_in_range * PAGE_SIZE);
+      num_pages -= pages_in_range;
+      ndx++;
+      if ( ndx == vcnt )
+        {
+          /*printk(TBOOT_ERR"exceeded number of var MTRRs when mapping range\n");*/
+          return GRUB_ERR_BAD_DEVICE;
+        }
+    }
+
+  return GRUB_ERR_NONE;
+}
+
+/*
+ * this must be done for each processor so that all have the same
+ * memory types
+ */
+static grub_err_t
+set_mtrrs_for_acmod (struct grub_txt_acm_header *hdr)
+{
+  unsigned long eflags;
+  unsigned long cr0, cr4;
+  grub_err_t err;
+
+  /*
+   * need to do some things before we start changing MTRRs
+   *
+   * since this will modify some of the MTRRs, they should be saved first
+   * so that they can be restored once the AC mod is done
+   */
+
+  /* Disable interrupts */
+  eflags = grub_read_flags_register ();
+  grub_write_flags_register (eflags & ~GRUB_EFLAGS_X86_IF);
+
+  /* Save CR0 then disable cache (CRO.CD=1, CR0.NW=0) */
+  cr0 = grub_read_control_register (GRUB_CR0);
+  grub_write_control_register (GRUB_CR0,
+                               (cr0 & ~GRUB_CR0_X86_NW) | GRUB_CR0_X86_CD);
+
+  /* Flush caches */
+  asm volatile ("wbinvd");
+
+  /* Save CR4 and disable global pages (CR4.PGE=0) */
+  cr4 = grub_read_control_register (GRUB_CR4);
+  grub_write_control_register (GRUB_CR4, cr4 & ~GRUB_CR4_X86_PGE);
+
+  /* Disable MTRRs */
+  set_all_mtrrs (0);
+
+  /* Set MTRRs for AC mod and rest of memory */
+  err = set_mtrr_mem_type ((grub_uint8_t*)hdr, hdr->size*4,
+                           GRUB_MTRR_MEMORY_TYPE_WB);
+  if ( err )
+    return err;
+
+  /* Undo some of earlier changes and enable our new settings */
+
+  /* Flush caches */
+  asm volatile ("wbinvd");
+
+  /* Enable MTRRs */
+  set_all_mtrrs (1);
+
+  /* Restore CR0 (cacheing) */
+  grub_write_control_register (GRUB_CR0, cr0);
+
+  /* Restore CR4 (global pages) */
+  grub_write_control_register (GRUB_CR4, cr4);
+
+  /* Restore flags */
+  grub_write_flags_register (eflags);
+
+  return GRUB_ERR_NONE;
+}
+
+static grub_err_t
+get_ram_ranges (grub_uint64_t *min_lo_ram, grub_uint64_t *max_lo_ram,
+                grub_uint64_t *min_hi_ram, grub_uint64_t *max_hi_ram)
+{
+  /* TODO this needs to be implemented differently than the logic in TBOOT */
+  *min_lo_ram = 0;
+  *max_lo_ram = 0;
+  *min_hi_ram = 0;
+  *max_hi_ram = 0;
+
+  return GRUB_ERR_NONE;
+}
+
+#define MLE_HDR_CAPS	0x000000227 /* rlp_wake_{getsec, monitor} = 1,
+                                       ecx_pgtbl = 1, nolg = 0, da = 1 tcg_event_log_format =1 */
+static grub_uint8_t*
+init_txt_heap (void *ptab_base, void *zero_page, grub_uint32_t mle_size,
+               struct grub_txt_acm_header *sinit)
+{
+  grub_uint8_t *txt_heap;
+  grub_uint64_t *size;
+  struct linux_kernel_params *boot_params =
+   (struct linux_kernel_params*)zero_page;
+  struct grub_txt_os_mle_data *os_mle_data;
+  struct grub_txt_os_sinit_data *os_sinit_data;
+  grub_uint32_t version, sinit_caps, caps_mask;
+  grub_uint64_t min_lo_ram, max_lo_ram, min_hi_ram, max_hi_ram;
+#ifdef GRUB_MACHINE_EFI
+  struct grub_acpi_rsdp_v20 *rsdp;
+#endif
+
+  txt_heap = grub_txt_get_heap ();
+
+  /* BIOS data already verified in grub_txt_verify_platform */
+
+  /*
+   * OS/loader to MLE data
+   */
+  os_mle_data = grub_txt_os_mle_data_start (txt_heap);
+  size = (grub_uint64_t *)((unsigned long)os_mle_data - sizeof(grub_uint64_t));
+  *size = sizeof(*os_mle_data) + sizeof(grub_uint64_t);
+  grub_memset (os_mle_data, 0, sizeof(*os_mle_data));
+  /* Set the zero page addr here */
+  /* NOTE msb_key_hash is not currently used and the log is setup later */
+  os_mle_data->zero_page_addr = (grub_uint32_t)(unsigned long)zero_page;
+  os_mle_data->version = GRUB_SL_OS_MLE_STRUCT_VERSION;
+  /* TODO this goes away os_mle_data->lo_pmr_min = g_min_ram;*/
+  os_mle_data->saved_misc_enable_msr = grub_rdmsr (GRUB_MSR_X86_MISC_ENABLE);
+  /* Might as well save the MTRR state here where OS-MLE is setup */
+  save_mtrrs(&(os_mle_data->saved_bsp_mtrrs));
+  /* Provide AP wake code block area */
+  /* TODO again there is a better way for GRUB to safely find a page in
+   * low memory for this.
+   */
+  grub_memset ((void*)(unsigned long)SLBOOT_AP_WAKE_BLOCK_ADDR, 0,
+               SLBOOT_AP_WAKE_BLOCK_SIZE);
+  os_mle_data->ap_wake_block = SLBOOT_AP_WAKE_BLOCK_ADDR;
+
+  /*
+   * OS/loader to SINIT data
+   */
+  /* Check sinit supported os_sinit_data version */
+  version = grub_txt_supported_os_sinit_data_ver (sinit);
+  if ( version < MIN_OS_SINIT_DATA_VER )
+    {
+      /* TODO printk(TBOOT_ERR"unsupported OS to SINIT data version(%u) in sinit\n",
+               version);*/
+      return NULL;
+    }
+  if ( version > MAX_OS_SINIT_DATA_VER )
+    version = MAX_OS_SINIT_DATA_VER;
+
+  os_sinit_data = grub_txt_os_sinit_data_start (txt_heap);
+  size = (grub_uint64_t *)((unsigned long)os_sinit_data - sizeof(grub_uint64_t));
+  *size = calc_os_sinit_data_size(version);
+  grub_memset (os_sinit_data, 0, *size);
+  os_sinit_data->version = version;
+
+  /* This is phys addr */
+  os_sinit_data->mle_ptab = (grub_uint64_t)(unsigned long)ptab_base;
+  os_sinit_data->mle_size = mle_size;
+
+  /* This is linear addr (offset from MLE base) of mle header */
+  os_sinit_data->mle_hdr_base = boot_params->slaunch_header;
+
+  /* VT-d PMRs */
+  if ( get_ram_ranges (&min_lo_ram, &max_lo_ram, &min_hi_ram, &max_hi_ram) )
+    return NULL;
+
+  /*
+   * base must be 2M-aligned and size must be multiple of 2M
+   * (so round bases and sizes down--rounding size up might conflict
+   *  with a BIOS-reserved region and cause problems; in practice, rounding
+   *  base down doesn't)
+   * we want to protect all of usable mem so that any kernel allocations
+   * before VT-d remapping is enabled are protected
+   */
+  os_sinit_data->vtd_pmr_lo_base = min_lo_ram & ~0x1fffffULL;
+  os_sinit_data->vtd_pmr_lo_size = (max_lo_ram - min_lo_ram) & ~0x1fffffULL;
+
+  os_sinit_data->vtd_pmr_hi_base = min_hi_ram & ~0x1fffffULL;
+  os_sinit_data->vtd_pmr_hi_size = (max_hi_ram - min_hi_ram) & ~0x1fffffULL;
+
+  /* Capabilities : choose monitor wake mechanism first */
+  sinit_caps = grub_txt_get_sinit_capabilities (sinit);
+  caps_mask = (GRUB_TXT_CAPS_GETSEC_WAKE_SUPPORT|
+               GRUB_TXT_CAPS_MONITOR_SUPPORT|
+               GRUB_TXT_CAPS_TPM12_AUTH_PCR_USAGE|
+               GRUB_TXT_CAPS_TPM20_EVLOG_SUPPORT|
+               GRUB_TXT_CAPS_ECX_PT_SUPPORT);
+  os_sinit_data->capabilities = MLE_HDR_CAPS & ~caps_mask;
+  if ( sinit_caps & GRUB_TXT_CAPS_MONITOR_SUPPORT )
+    os_sinit_data->capabilities |= GRUB_TXT_CAPS_MONITOR_SUPPORT;
+  else if ( sinit_caps & GRUB_TXT_CAPS_GETSEC_WAKE_SUPPORT )
+    os_sinit_data->capabilities |= GRUB_TXT_CAPS_GETSEC_WAKE_SUPPORT;
+  else
+   { /* should have been detected in verify_acmod() */
+     /*printk(TBOOT_ERR"SINIT capabilities are incompatible (0x%x)\n", sinit_caps._raw);*/
+     return NULL;
+   }
+  /* TODO event log processing needs to be incorporated. There is a clean room verion
+   * for event log handling that was created for this.
+  if ( get_evtlog_type() == EVTLOG_TPM2_TCG )
+    {
+      printk(TBOOT_INFO"SINIT ACM supports TCG compliant TPM 2.0 event log format, tcg_event_log_format = %d \n",
+              sinit_caps.tcg_event_log_format);
+      os_sinit_data->capabilities | GRUB_TXT_CAPS_TPM20_EVLOG_SUPPORT;
+    }*/
+
+  /* This call will sort out if it is fetched lecacy or EFI and only care
+   * about this field on EFI platforms
+   */
+#ifdef GRUB_MACHINE_EFI
+  rsdp = grub_acpi_get_rsdpv2 ();
+  if ( !rsdp ) /* SNO */
+    return NULL;
+
+  if (version < 6)
+    os_sinit_data->efi_rsdt_ptr = rsdp->rsdpv1.rsdt_addr;
+  else
+    os_sinit_data->efi_rsdt_ptr = (grub_uint64_t)((unsigned long)rsdp);
+#endif
+
+  /* Capabilities : choose DA/LG */
+  os_sinit_data->capabilities |= GRUB_TXT_CAPS_TPM12_NO_LEGACY_PCR_USAGE;
+  if ( (sinit_caps & GRUB_TXT_CAPS_TPM12_AUTH_PCR_USAGE) && param_prefer_da() )
+    os_sinit_data->capabilities |= GRUB_TXT_CAPS_TPM12_AUTH_PCR_USAGE;
+  else if ( !(sinit_caps & GRUB_TXT_CAPS_TPM12_NO_LEGACY_PCR_USAGE) )
+     os_sinit_data->capabilities &= ~GRUB_TXT_CAPS_TPM12_NO_LEGACY_PCR_USAGE;
+  else if ( (sinit_caps & GRUB_TXT_CAPS_TPM12_AUTH_PCR_USAGE) )
+    {
+      /*printk(TBOOT_INFO
+            "DA is the only supported PCR mapping by SINIT, use it\n");*/
+      os_sinit_data->capabilities |= GRUB_TXT_CAPS_TPM12_AUTH_PCR_USAGE;
+    }
+  else
+    {
+        /*printk(TBOOT_ERR"SINIT capabilities are incompatible (0x%x)\n",
+               sinit_caps._raw);*/
+        return NULL;
+    }
+
+  /* PCR mapping selection MUST be zero in TPM2.0 mode
+   * since D/A mapping is the only supported by TPM2.0 */
+  /* TODO extpol is related to evt logging which is pending. The slaunch
+   * figured out if this is in TPM 1.2 or 2.0 mode, this should be passed
+   * as an init param (see above in param_prefer_da).
+  if ( tpm->major >= TPM20_VER_MAJOR )
+    {
+      os_sinit_data->flags = (tpm->extpol == TB_EXTPOL_AGILE) ? 0 : 1;
+      os_sinit_data->capabilities &= GRUB_TXT_CAPS_TPM12_NO_LEGACY_PCR_USAGE;
+      os_sinit_data->capabilities &= ~GRUB_TXT_CAPS_TPM12_AUTH_PCR_USAGE;
+    }*/
+
+  /* Event log initialization */
+  /* TODO evt log hanlding is still pending.
+  if ( os_sinit_data->version >= 6 )
+    init_os_sinit_ext_data(os_sinit_data->ext_data_elts);*/
+
+  return txt_heap;
+}
+
+grub_err_t
+grub_txt_launch_environment (grub_uint32_t mle_start, grub_uint32_t mle_size,
+                             struct grub_txt_acm_header *sinit,
+                             void *zero_page)
+{
+  void *mle_ptab_base;
+  struct linux_kernel_params *boot_params =
+   (struct linux_kernel_params*)zero_page;
+  grub_uint8_t *txt_heap;
+  grub_err_t err;
+  //grub_uint32_t *mle_size_ptr;
+
+  if ( mle_size > SLBOOT_MLEPT_BYTES_COVERED )
+     return grub_error (GRUB_ERR_BAD_ARGUMENT,
+                 N_("secure launch MLE size too big"));
+
+  /* MLE should start on page boundary */
+  if ( mle_start & ~PAGE_MASK )
+     return grub_error (GRUB_ERR_BAD_ARGUMENT,
+                 N_("secure launch MLE base misaligned"));
+
+  /* Place ptab_base below MLE. If the kernel is not relocatable then
+   * we have to use the low memory block since the kernel gets loaded
+   * at 1M. This does not work on server systems though.
+   */
+  if ( boot_params->relocatable_kernel )
+    {
+      /* TODO this is a simple way to do the allocation. Not sure it will work
+       * with the way GRUB manages memory. Probably needs to be done when the
+       * kernel image space is allocated.
+       */
+      mle_ptab_base = (void*)(unsigned long)(mle_start - SLBOOT_MLEPT_SIZE);
+    }
+  else
+    mle_ptab_base = (void*)SLBOOT_MLEPT_ADDR;
+
+  mle_ptab_base = setup_mle_pagetables (mle_start, mle_size,
+                                        mle_ptab_base, SLBOOT_MLEPT_SIZE);
+
+  if ( !mle_ptab_base )
+     return grub_error (GRUB_ERR_BAD_ARGUMENT,
+                 N_("secure launch failed to build MLE page tables"));
+
+  txt_heap = init_txt_heap (mle_ptab_base, zero_page, mle_size, sinit);
+  if ( !txt_heap )
+     return grub_error (GRUB_ERR_BAD_DEVICE,
+                 N_("secure launch failed to init TXT heap"));
+
+  err = set_mtrrs_for_acmod (sinit);
+  if ( err )
+     return grub_error (err,
+                 N_("secure launch failed to set MTRRs for ACM"));
+
+  return GRUB_ERR_NONE;
+}
-- 
2.13.6

